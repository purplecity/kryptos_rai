// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package translate

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// VbnbABI is the input ABI used to generate the binding from.
const VbnbABI = "[{\"inputs\":[{\"internalType\":\"contractComptrollerInterface\",\"name\":\"comptroller_\",\"type\":\"address\"},{\"internalType\":\"contractInterestRateModel\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"addresspayable\",\"name\":\"admin_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashPrior\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAccumulated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"AccrueInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vTokenCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"LiquidateBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractComptrollerInterface\",\"name\":\"oldComptroller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractComptrollerInterface\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"NewComptroller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractInterestRateModel\",\"name\":\"oldInterestRateModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractInterestRateModel\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"NewMarketInterestRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReserveFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewReserveFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"RepayBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"benefactor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reduceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesReduced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reduceAmount\",\"type\":\"uint256\"}],\"name\":\"_reduceReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractComptrollerInterface\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"_setComptroller\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractInterestRateModel\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"_setInterestRateModel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setReserveFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accrualBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"borrowBalanceCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"borrowBalanceStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contractComptrollerInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exchangeRateCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRateStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractComptrollerInterface\",\"name\":\"comptroller_\",\"type\":\"address\"},{\"internalType\":\"contractInterestRateModel\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contractInterestRateModel\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isVToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contractVToken\",\"name\":\"vTokenCollateral\",\"type\":\"address\"}],\"name\":\"liquidateBorrow\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"repayBorrow\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"repayBorrowBehalf\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"totalBorrowsCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// VbnbBin is the compiled bytecode used for deploying new contracts.
var VbnbBin = "0x60806040523480156200001157600080fd5b50604051620056be380380620056be833981810160405260e08110156200003757600080fd5b8151602083015160408085015160608601805192519496939591949391820192846401000000008211156200006b57600080fd5b9083019060208201858111156200008157600080fd5b82516401000000008111828201881017156200009c57600080fd5b82525081516020918201929091019080838360005b83811015620000cb578181015183820152602001620000b1565b50505050905090810190601f168015620000f95780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011d57600080fd5b9083019060208201858111156200013357600080fd5b82516401000000008111828201881017156200014e57600080fd5b82525081516020918201929091019080838360005b838110156200017d57818101518382015260200162000163565b50505050905090810190601f168015620001ab5780820380516001836020036101000a031916815260200191505b506040908152602082015191015160038054610100600160a81b03191633610100021790559092509050620001e587878787878762000218565b600380546001600160a01b0390921661010002610100600160a81b03199092169190911790555062000853945050505050565b60035461010090046001600160a01b03163314620002685760405162461bcd60e51b8152600401808060200182810382526024815260200180620056256024913960400191505060405180910390fd5b600954158015620002795750600a54155b620002b65760405162461bcd60e51b8152600401808060200182810382526023815260200180620056496023913960400191505060405180910390fd5b600784905583620002f95760405162461bcd60e51b81526004018080602001828103825260308152602001806200566c6030913960400191505060405180910390fd5b60006200030f876001600160e01b036200042e16565b9050801562000365576040805162461bcd60e51b815260206004820152601a60248201527f73657474696e6720636f6d7074726f6c6c6572206661696c6564000000000000604482015290519081900360640190fd5b620003786001600160e01b036200059616565b600955670de0b6b3a7640000600a556200039b866001600160e01b036200059b16565b90508015620003dc5760405162461bcd60e51b81526004018080602001828103825260228152602001806200569c6022913960400191505060405180910390fd5b8351620003f1906001906020870190620007b1565b50825162000407906002906020860190620007b1565b50506003805460ff90921660ff199283161790556000805490911660011790555050505050565b60035460009061010090046001600160a01b031633146200046857620004606001603f6001600160e01b036200074116565b905062000591565b60055460408051623f1ee960e11b815290516001600160a01b0392831692851691627e3dd2916004808301926020929190829003018186803b158015620004ae57600080fd5b505afa158015620004c3573d6000803e3d6000fd5b505050506040513d6020811015620004da57600080fd5b50516200052e576040805162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c736500000000604482015290519081900360640190fd5b600580546001600160a01b0319166001600160a01b03858116918217909255604080519284168352602083019190915280517f7ac369dbd14fa5ea3f473ed67cc9d598964a77501540ba6751eb0b3decf5870d9281900390910190a160005b9150505b919050565b435b90565b600354600090819061010090046001600160a01b03163314620005d857620005cf600160426001600160e01b036200074116565b91505062000591565b620005eb6001600160e01b036200059616565b600954146200060b57620005cf600a60416001600160e01b036200074116565b600660009054906101000a90046001600160a01b03169050826001600160a01b0316632191f92a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200065d57600080fd5b505afa15801562000672573d6000803e3d6000fd5b505050506040513d60208110156200068957600080fd5b5051620006dd576040805162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c736500000000604482015290519081900360640190fd5b600680546001600160a01b0319166001600160a01b03858116918217909255604080519284168352602083019190915280517fedffc32e068c7c95dfd4bdfd5c4d939a084d6b11c4199eac8436ed234d72f9269281900390910190a160006200058d565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa08360118111156200077157fe5b8360558111156200077e57fe5b604080519283526020830191909152600082820152519081900360600190a1826011811115620007aa57fe5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620007f457805160ff191683800117855562000824565b8280016001018555821562000824579182015b828111156200082457825182559160200191906001019062000807565b506200083292915062000836565b5090565b6200059891905b808211156200083257600081556001016200083d565b614dc280620008636000396000f3fe6080604052600436106102725760003560e01c80638f840ddd1161014f578063bd6d894d116100c1578063e9c714f21161007a578063e9c714f214610a22578063f2b3abbd14610a37578063f3fdb15a14610a6a578063f851a44014610a7f578063f8f9da2814610a94578063fca7820b14610aa957610272565b8063bd6d894d146108ff578063c37f68e214610914578063c5ebeaec1461096d578063db006a7514610997578063dd62ed3e146109c1578063e5974619146109fc57610272565b8063a9059cbb11610113578063a9059cbb146107f8578063aa5af0fd14610831578063aae40a2a14610846578063ae9d70b014610874578063b2a02ff114610889578063b71d1a0c146108cc57610272565b80638f840ddd1461062757806395d89b411461063c57806395dd91931461065157806399d8c1b414610684578063a6afed95146107e357610272565b80633b1d21a2116101e85780635fe3b567116101ac5780635fe3b56714610561578063601a0bf1146105765780636c540baf146105a057806370a08231146105b557806373acee98146105e8578063852a12e3146105fd57610272565b80633b1d21a2146104e75780633d9ea3a1146104fc5780634576b5db1461051157806347bd3718146105445780634e4d9fea1461055957610272565b806318160ddd1161023a57806318160ddd146103eb578063182df0f51461040057806323b872dd146104155780632678224714610458578063313ce567146104895780633af9e669146104b457610272565b806306fdde03146102b0578063095ea7b31461033a5780631249c58b14610387578063173b99041461039157806317bfdfbc146103b8575b600061027d34610ad3565b5090506102ad816040518060400160405280600b81526020016a1b5a5b9d0819985a5b195960aa1b815250610b7b565b50005b3480156102bc57600080fd5b506102c5610d7b565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102ff5781810151838201526020016102e7565b50505050905090810190601f16801561032c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561034657600080fd5b506103736004803603604081101561035d57600080fd5b506001600160a01b038135169060200135610e08565b604080519115158252519081900360200190f35b61038f610e75565b005b34801561039d57600080fd5b506103a6610eb3565b60408051918252519081900360200190f35b3480156103c457600080fd5b506103a6600480360360208110156103db57600080fd5b50356001600160a01b0316610eb9565b3480156103f757600080fd5b506103a6610f79565b34801561040c57600080fd5b506103a6610f7f565b34801561042157600080fd5b506103736004803603606081101561043857600080fd5b506001600160a01b03813581169160208101359091169060400135610fe2565b34801561046457600080fd5b5061046d611054565b604080516001600160a01b039092168252519081900360200190f35b34801561049557600080fd5b5061049e611063565b6040805160ff9092168252519081900360200190f35b3480156104c057600080fd5b506103a6600480360360208110156104d757600080fd5b50356001600160a01b031661106c565b3480156104f357600080fd5b506103a6611124565b34801561050857600080fd5b50610373611133565b34801561051d57600080fd5b506103a66004803603602081101561053457600080fd5b50356001600160a01b0316611138565b34801561055057600080fd5b506103a661128d565b61038f611293565b34801561056d57600080fd5b5061046d6112d5565b34801561058257600080fd5b506103a66004803603602081101561059957600080fd5b50356112e4565b3480156105ac57600080fd5b506103a661137f565b3480156105c157600080fd5b506103a6600480360360208110156105d857600080fd5b50356001600160a01b0316611385565b3480156105f457600080fd5b506103a66113a0565b34801561060957600080fd5b506103a66004803603602081101561062057600080fd5b5035611456565b34801561063357600080fd5b506103a6611461565b34801561064857600080fd5b506102c5611467565b34801561065d57600080fd5b506103a66004803603602081101561067457600080fd5b50356001600160a01b03166114bf565b34801561069057600080fd5b5061038f600480360360c08110156106a757600080fd5b6001600160a01b038235811692602081013590911691604082013591908101906080810160608201356401000000008111156106e257600080fd5b8201836020820111156106f457600080fd5b8035906020019184600183028401116401000000008311171561071657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561076957600080fd5b82018360208201111561077b57600080fd5b8035906020019184600183028401116401000000008311171561079d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050903560ff16915061151c9050565b3480156107ef57600080fd5b506103a6611703565b34801561080457600080fd5b506103736004803603604081101561081b57600080fd5b506001600160a01b038135169060200135611a5b565b34801561083d57600080fd5b506103a6611acc565b61038f6004803603604081101561085c57600080fd5b506001600160a01b0381358116916020013516611ad2565b34801561088057600080fd5b506103a6611b1f565b34801561089557600080fd5b506103a6600480360360608110156108ac57600080fd5b506001600160a01b03813581169160208101359091169060400135611bbe565b3480156108d857600080fd5b506103a6600480360360208110156108ef57600080fd5b50356001600160a01b0316611c2f565b34801561090b57600080fd5b506103a6611cbb565b34801561092057600080fd5b506109476004803603602081101561093757600080fd5b50356001600160a01b0316611d77565b604080519485526020850193909352838301919091526060830152519081900360800190f35b34801561097957600080fd5b506103a66004803603602081101561099057600080fd5b5035611e0c565b3480156109a357600080fd5b506103a6600480360360208110156109ba57600080fd5b5035611e17565b3480156109cd57600080fd5b506103a6600480360360408110156109e457600080fd5b506001600160a01b0381358116916020013516611e22565b61038f60048036036020811015610a1257600080fd5b50356001600160a01b0316611e4d565b348015610a2e57600080fd5b506103a6611e9b565b348015610a4357600080fd5b506103a660048036036020811015610a5a57600080fd5b50356001600160a01b0316611f9e565b348015610a7657600080fd5b5061046d611fd8565b348015610a8b57600080fd5b5061046d611fe7565b348015610aa057600080fd5b506103a6611ffb565b348015610ab557600080fd5b506103a660048036036020811015610acc57600080fd5b503561205f565b60008054819060ff16610b1a576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19168155610b2c611703565b90508015610b5757610b4a816011811115610b4357fe5b601e6120dd565b925060009150610b679050565b610b613385612143565b92509250505b6000805460ff191660011790559092909150565b81610b8557610d77565b606081516005016040519080825280601f01601f191660200182016040528015610bb6576020820181803883390190505b50905060005b8251811015610c0757828181518110610bd157fe5b602001015160f81c60f81b828281518110610be857fe5b60200101906001600160f81b031916908160001a905350600101610bbc565b8151600160fd1b90839083908110610c1b57fe5b60200101906001600160f81b031916908160001a905350602860f81b828260010181518110610c4657fe5b60200101906001600160f81b031916908160001a905350600a840460300160f81b828260020181518110610c7657fe5b60200101906001600160f81b031916908160001a905350600a840660300160f81b828260030181518110610ca657fe5b60200101906001600160f81b031916908160001a905350602960f81b828260040181518110610cd157fe5b60200101906001600160f81b031916908160001a905350818415610d735760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610d38578181015183820152602001610d20565b50505050905090810190601f168015610d655780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050505b5050565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610e005780601f10610dd557610100808354040283529160200191610e00565b820191906000526020600020905b815481529060010190602001808311610de357829003601f168201915b505050505081565b336000818152600f602090815260408083206001600160a01b03871680855290835281842086905581518681529151939493909284927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a360019150505b92915050565b6000610e8034610ad3565b509050610eb0816040518060400160405280600b81526020016a1b5a5b9d0819985a5b195960aa1b815250610b7b565b50565b60085481565b6000805460ff16610efe576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19168155610f10611703565b14610f5b576040805162461bcd60e51b81526020600482015260166024820152751858d8dc9d59481a5b9d195c995cdd0819985a5b195960521b604482015290519081900360640190fd5b610f64826114bf565b90505b6000805460ff19166001179055919050565b600d5481565b6000806000610f8c6125a3565b90925090506000826003811115610f9f57fe5b14610fdb5760405162461bcd60e51b8152600401808060200182810382526035815260200180614cd96035913960400191505060405180910390fd5b9150505b90565b6000805460ff16611027576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff1916815561103d33868686612652565b1490506000805460ff191660011790559392505050565b6004546001600160a01b031681565b60035460ff1681565b60006110766149c7565b6040518060200160405280611089611cbb565b90526001600160a01b0384166000908152600e60205260408120549192509081906110b5908490612962565b909250905060008260038111156110c857fe5b1461111a576040805162461bcd60e51b815260206004820152601f60248201527f62616c616e636520636f756c64206e6f742062652063616c63756c6174656400604482015290519081900360640190fd5b925050505b919050565b600061112e6129b5565b905090565b600181565b60035460009061010090046001600160a01b031633146111655761115e6001603f6120dd565b905061111f565b60055460408051623f1ee960e11b815290516001600160a01b0392831692851691627e3dd2916004808301926020929190829003018186803b1580156111aa57600080fd5b505afa1580156111be573d6000803e3d6000fd5b505050506040513d60208110156111d457600080fd5b5051611227576040805162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c736500000000604482015290519081900360640190fd5b600580546001600160a01b0319166001600160a01b03858116918217909255604080519284168352602083019190915280517f7ac369dbd14fa5ea3f473ed67cc9d598964a77501540ba6751eb0b3decf5870d9281900390910190a160005b9392505050565b600b5481565b600061129e34612a21565b509050610eb081604051806040016040528060128152602001711c995c185e509bdc9c9bddc819985a5b195960721b815250610b7b565b6005546001600160a01b031681565b6000805460ff16611329576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff1916815561133b611703565b905080156113615761135981601181111561135257fe5b60306120dd565b915050610f67565b61136a83612aa3565b9150506000805460ff19166001179055919050565b60095481565b6001600160a01b03166000908152600e602052604090205490565b6000805460ff166113e5576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff191681556113f7611703565b14611442576040805162461bcd60e51b81526020600482015260166024820152751858d8dc9d59481a5b9d195c995cdd0819985a5b195960521b604482015290519081900360640190fd5b50600b546000805460ff1916600117905590565b6000610e6f82612bd6565b600c5481565b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181529291830182828015610e005780601f10610dd557610100808354040283529160200191610e00565b60008060006114cd84612c57565b909250905060008260038111156114e057fe5b146112865760405162461bcd60e51b8152600401808060200182810382526037815260200180614be46037913960400191505060405180910390fd5b60035461010090046001600160a01b0316331461156a5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b206024913960400191505060405180910390fd5b60095415801561157a5750600a54155b6115b55760405162461bcd60e51b8152600401808060200182810382526023815260200180614b446023913960400191505060405180910390fd5b6007849055836115f65760405162461bcd60e51b8152600401808060200182810382526030815260200180614b676030913960400191505060405180910390fd5b600061160187611138565b90508015611656576040805162461bcd60e51b815260206004820152601a60248201527f73657474696e6720636f6d7074726f6c6c6572206661696c6564000000000000604482015290519081900360640190fd5b61165e612d0b565b600955670de0b6b3a7640000600a5561167686612d0f565b905080156116b55760405162461bcd60e51b8152600401808060200182810382526022815260200180614b976022913960400191505060405180910390fd5b83516116c89060019060208701906149da565b5082516116dc9060029060208601906149da565b50506003805460ff90921660ff199283161790556000805490911660011790555050505050565b60008061170e612d0b565b6009549091508082141561172757600092505050610fdf565b60006117316129b5565b600b54600c54600a54600654604080516315f2405360e01b815260048101879052602481018690526044810185905290519596509394929391926000926001600160a01b03909216916315f24053916064808301926020929190829003018186803b15801561179f57600080fd5b505afa1580156117b3573d6000803e3d6000fd5b505050506040513d60208110156117c957600080fd5b5051905065048c27395000811115611828576040805162461bcd60e51b815260206004820152601c60248201527f626f72726f772072617465206973206162737572646c79206869676800000000604482015290519081900360640190fd5b6000806118358989612e84565b9092509050600082600381111561184857fe5b1461189a576040805162461bcd60e51b815260206004820152601f60248201527f636f756c64206e6f742063616c63756c61746520626c6f636b2064656c746100604482015290519081900360640190fd5b6118a26149c7565b6000806000806118c060405180602001604052808a81525087612ea7565b909750945060008760038111156118d357fe5b14611905576118f0600960068960038111156118eb57fe5b612f0f565b9e505050505050505050505050505050610fdf565b61190f858c612962565b9097509350600087600381111561192257fe5b1461193a576118f0600960018960038111156118eb57fe5b611944848c612f75565b9097509250600087600381111561195757fe5b1461196f576118f0600960048960038111156118eb57fe5b61198a6040518060200160405280600854815250858c612f9b565b9097509150600087600381111561199d57fe5b146119b5576118f0600960058960038111156118eb57fe5b6119c0858a8b612f9b565b909750905060008760038111156119d357fe5b146119eb576118f0600960038960038111156118eb57fe5b60098e9055600a819055600b839055600c829055604080518d8152602081018690528082018390526060810185905290517f4dec04e750ca11537cabcd8a9eab06494de08da3735bc8871cd41250e190bc049181900360800190a160009e50505050505050505050505050505090565b6000805460ff16611aa0576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19168155611ab633338686612652565b1490506000805460ff1916600117905592915050565b600a5481565b6000611adf833484612ff7565b509050611b1a81604051806040016040528060168152602001751b1a5c5d5a59185d19509bdc9c9bddc819985a5b195960521b815250610b7b565b505050565b6006546000906001600160a01b031663b8168816611b3b6129b5565b600b54600c546008546040518563ffffffff1660e01b81526004018085815260200184815260200183815260200182815260200194505050505060206040518083038186803b158015611b8d57600080fd5b505afa158015611ba1573d6000803e3d6000fd5b505050506040513d6020811015611bb757600080fd5b5051905090565b6000805460ff16611c03576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19169055611c1933858585613129565b90506000805460ff191660011790559392505050565b60035460009061010090046001600160a01b03163314611c555761115e600160456120dd565b600480546001600160a01b038481166001600160a01b0319831681179093556040805191909216808252602082019390935281517fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9929181900390910190a16000611286565b6000805460ff16611d00576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19168155611d12611703565b14611d5d576040805162461bcd60e51b81526020600482015260166024820152751858d8dc9d59481a5b9d195c995cdd0819985a5b195960521b604482015290519081900360640190fd5b611d65610f7f565b90506000805460ff1916600117905590565b6001600160a01b0381166000908152600e6020526040812054819081908190818080611da289612c57565b935090506000816003811115611db457fe5b14611dd25760095b975060009650869550859450611e059350505050565b611dda6125a3565b925090506000816003811115611dec57fe5b14611df8576009611dbc565b5060009650919450925090505b9193509193565b6000610e6f8261338f565b6000610e6f8261340e565b6001600160a01b039182166000908152600f6020908152604080832093909416825291909152205490565b6000611e598234613488565b509050610d77816040518060400160405280601881526020017f7265706179426f72726f77426568616c66206661696c65640000000000000000815250610b7b565b6004546000906001600160a01b031633141580611eb6575033155b15611ece57611ec7600160006120dd565b9050610fdf565b60038054600480546001600160a01b03818116610100818102610100600160a81b0319871617968790556001600160a01b031990931690935560408051948390048216808652929095041660208401528351909391927ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc92908290030190a1600454604080516001600160a01b038085168252909216602083015280517fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a99281900390910190a160009250505090565b600080611fa9611703565b90508015611fcf57611fc7816011811115611fc057fe5b60406120dd565b91505061111f565b61128683612d0f565b6006546001600160a01b031681565b60035461010090046001600160a01b031681565b6006546000906001600160a01b03166315f240536120176129b5565b600b54600c546040518463ffffffff1660e01b815260040180848152602001838152602001828152602001935050505060206040518083038186803b158015611b8d57600080fd5b6000805460ff166120a4576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff191681556120b6611703565b905080156120d4576113598160118111156120cd57fe5b60466120dd565b61136a83613533565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa083601181111561210c57fe5b83605581111561211857fe5b604080519283526020830191909152600082820152519081900360600190a182601181111561128657fe5b60055460408051634ef4c3e160e01b81523060048201526001600160a01b03858116602483015260448201859052915160009384938493911691634ef4c3e19160648082019260209290919082900301818787803b1580156121a457600080fd5b505af11580156121b8573d6000803e3d6000fd5b505050506040513d60208110156121ce57600080fd5b5051905080156121f2576121e56003601f83612f0f565b92506000915061259c9050565b6121fa612d0b565b6009541461220e576121e5600a60226120dd565b612216614a58565b61221e6125a3565b604083018190526020830182600381111561223557fe5b600381111561224057fe5b905250600090508160200151600381111561225757fe5b146122815761227360096021836020015160038111156118eb57fe5b93506000925061259c915050565b61228b86866135db565b60c08201819052604080516020810182529083015181526122ac9190613677565b60608301819052602083018260038111156122c357fe5b60038111156122ce57fe5b90525060009050816020015160038111156122e557fe5b14612337576040805162461bcd60e51b815260206004820181905260248201527f4d494e545f45584348414e47455f43414c43554c4154494f4e5f4641494c4544604482015290519081900360640190fd5b612347600d548260600151612f75565b608083018190526020830182600381111561235e57fe5b600381111561236957fe5b905250600090508160200151600381111561238057fe5b146123bc5760405162461bcd60e51b8152600401808060200182810382526028815260200180614d0e6028913960400191505060405180910390fd5b6001600160a01b0386166000908152600e602052604090205460608201516123e49190612f75565b60a08301819052602083018260038111156123fb57fe5b600381111561240657fe5b905250600090508160200151600381111561241d57fe5b146124595760405162461bcd60e51b815260040180806020018281038252602b815260200180614bb9602b913960400191505060405180910390fd5b6080810151600d5560a08101516001600160a01b0387166000818152600e60209081526040918290209390935560c084015160608086015183519485529484019190915282820193909352517f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f929181900390910190a1606081015160408051918252516001600160a01b038816913091600080516020614c558339815191529181900360200190a360055460c08201516060830151604080516341c728b960e01b81523060048201526001600160a01b038b81166024830152604482019490945260648101929092525191909216916341c728b991608480830192600092919082900301818387803b15801561256f57600080fd5b505af1158015612583573d6000803e3d6000fd5b5060009250612590915050565b8160c001519350935050505b9250929050565b600d546000908190806125be5750506007546000915061264e565b60006125c86129b5565b905060006125d46149c7565b60006125e584600b54600c5461368e565b9350905060008160038111156125f757fe5b1461260c5795506000945061264e9350505050565b61261683866136cc565b92509050600081600381111561262857fe5b1461263d5795506000945061264e9350505050565b505160009550935061264e92505050565b9091565b600554604080516317b9b84b60e31b81523060048201526001600160a01b03868116602483015285811660448301526064820185905291516000938493169163bdcdc25891608480830192602092919082900301818787803b1580156126b757600080fd5b505af11580156126cb573d6000803e3d6000fd5b505050506040513d60208110156126e157600080fd5b505190508015612700576126f86003604a83612f0f565b91505061295a565b836001600160a01b0316856001600160a01b03161415612726576126f86002604b6120dd565b60006001600160a01b038781169087161415612745575060001961276d565b506001600160a01b038086166000908152600f60209081526040808320938a16835292905220545b60008060008061277d8589612e84565b9094509250600084600381111561279057fe5b146127ae576127a16009604b6120dd565b965050505050505061295a565b6001600160a01b038a166000908152600e60205260409020546127d19089612e84565b909450915060008460038111156127e457fe5b146127f5576127a16009604c6120dd565b6001600160a01b0389166000908152600e60205260409020546128189089612f75565b9094509050600084600381111561282b57fe5b1461283c576127a16009604d6120dd565b6001600160a01b03808b166000908152600e6020526040808220859055918b168152208190556000198514612894576001600160a01b03808b166000908152600f60209081526040808320938f168352929052208390555b886001600160a01b03168a6001600160a01b0316600080516020614c558339815191528a6040518082815260200191505060405180910390a36005546040805163352b4a3f60e11b81523060048201526001600160a01b038d811660248301528c81166044830152606482018c905291519190921691636a56947e91608480830192600092919082900301818387803b15801561293057600080fd5b505af1158015612944573d6000803e3d6000fd5b5060009250612951915050565b96505050505050505b949350505050565b600080600061296f6149c7565b6129798686612ea7565b9092509050600082600381111561298c57fe5b1461299d575091506000905061259c565b60006129a88261377c565b9350935050509250929050565b60008060006129c44734612e84565b909250905060008260038111156129d757fe5b14610fdb576040805162461bcd60e51b815260206004820152601560248201527431b0b9b410383934b7b91036b0ba341032b93937b960591b604482015290519081900360640190fd5b60008054819060ff16612a68576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19168155612a7a611703565b90508015612a9857610b4a816011811115612a9157fe5b60366120dd565b610b6133338661378b565b600354600090819061010090046001600160a01b03163314612acb57611fc7600160316120dd565b612ad3612d0b565b60095414612ae757611fc7600a60336120dd565b82612af06129b5565b1015612b0257611fc7600e60326120dd565b600c54831115612b1857611fc7600260346120dd565b50600c5482810390811115612b5e5760405162461bcd60e51b8152600401808060200182810382526024815260200180614d6a6024913960400191505060405180910390fd5b600c819055600354612b7e9061010090046001600160a01b031684613b70565b600354604080516101009092046001600160a01b0316825260208201859052818101839052517f3bad0c59cf2f06e7314077049f48a93578cd16f5ef92329f1dab1420a99c177e916060908290030190a16000611286565b6000805460ff16612c1b576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19168155612c2d611703565b90508015612c4b57611359816011811115612c4457fe5b60276120dd565b61136a33600085613ba6565b6001600160a01b038116600090815260106020526040812080548291829182918291612c8e575060009450849350612d0692505050565b612c9e8160000154600a5461406d565b90945092506000846003811115612cb157fe5b14612cc6575091935060009250612d06915050565b612cd48382600101546140ac565b90945091506000846003811115612ce757fe5b14612cfc575091935060009250612d06915050565b5060009450925050505b915091565b4390565b600354600090819061010090046001600160a01b03163314612d3757611fc7600160426120dd565b612d3f612d0b565b60095414612d5357611fc7600a60416120dd565b600660009054906101000a90046001600160a01b03169050826001600160a01b0316632191f92a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612da457600080fd5b505afa158015612db8573d6000803e3d6000fd5b505050506040513d6020811015612dce57600080fd5b5051612e21576040805162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c736500000000604482015290519081900360640190fd5b600680546001600160a01b0319166001600160a01b03858116918217909255604080519284168352602083019190915280517fedffc32e068c7c95dfd4bdfd5c4d939a084d6b11c4199eac8436ed234d72f9269281900390910190a16000611286565b600080838311612e9b57506000905081830361259c565b5060039050600061259c565b6000612eb16149c7565b600080612ec286600001518661406d565b90925090506000826003811115612ed557fe5b14612ef45750604080516020810190915260008152909250905061259c565b60408051602081019091529081526000969095509350505050565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0846011811115612f3e57fe5b846055811115612f4a57fe5b604080519283526020830191909152818101859052519081900360600190a183601181111561295a57fe5b600080838301848110612f8d5760009250905061259c565b50600291506000905061259c565b6000806000612fa86149c7565b612fb28787612ea7565b90925090506000826003811115612fc557fe5b14612fd65750915060009050612fef565b612fe8612fe28261377c565b86612f75565b9350935050505b935093915050565b60008054819060ff1661303e576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19168155613050611703565b9050801561307b5761306e81601181111561306757fe5b600f6120dd565b9250600091506131129050565b836001600160a01b031663a6afed956040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156130b657600080fd5b505af11580156130ca573d6000803e3d6000fd5b505050506040513d60208110156130e057600080fd5b5051905080156131005761306e8160118111156130f957fe5b60106120dd565b61310c338787876140d7565b92509250505b6000805460ff191660011790559094909350915050565b6005546040805163d02f735160e01b81523060048201526001600160a01b038781166024830152868116604483015285811660648301526084820185905291516000938493169163d02f73519160a480830192602092919082900301818787803b15801561319657600080fd5b505af11580156131aa573d6000803e3d6000fd5b505050506040513d60208110156131c057600080fd5b5051905080156131d7576126f86003601b83612f0f565b846001600160a01b0316846001600160a01b031614156131fd576126f86006601c6120dd565b6001600160a01b0384166000908152600e6020526040812054819081906132249087612e84565b9093509150600083600381111561323757fe5b1461325a5761324f6009601a8560038111156118eb57fe5b94505050505061295a565b6001600160a01b0388166000908152600e602052604090205461327d9087612f75565b9093509050600083600381111561329057fe5b146132a85761324f600960198560038111156118eb57fe5b6001600160a01b038088166000818152600e60209081526040808320879055938c168083529184902085905583518a815293519193600080516020614c55833981519152929081900390910190a360055460408051636d35bf9160e01b81523060048201526001600160a01b038c811660248301528b811660448301528a81166064830152608482018a905291519190921691636d35bf919160a480830192600092919082900301818387803b15801561336157600080fd5b505af1158015613375573d6000803e3d6000fd5b5060009250613382915050565b9998505050505050505050565b6000805460ff166133d4576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff191681556133e6611703565b90508015613404576113598160118111156133fd57fe5b60086120dd565b61136a338461465a565b6000805460ff16613453576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff19168155613465611703565b9050801561347c57611359816011811115612c4457fe5b61136a33846000613ba6565b60008054819060ff166134cf576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6000805460ff191681556134e1611703565b9050801561350c576134ff8160118111156134f857fe5b60356120dd565b92506000915061351d9050565b61351733868661378b565b92509250505b6000805460ff1916600117905590939092509050565b60035460009061010090046001600160a01b031633146135595761115e600160476120dd565b613561612d0b565b600954146135755761115e600a60486120dd565b670de0b6b3a76400008211156135915761115e600260496120dd565b6008805490839055604080518281526020810185905281517faaa68312e2ea9d50e16af5068410ab56e1a1fd06037b1a35664812c30f821460929181900390910190a16000611286565b6000336001600160a01b0384161461362c576040805162461bcd60e51b815260206004820152600f60248201526e0e6cadcc8cae440dad2e6dac2e8c6d608b1b604482015290519081900360640190fd5b813414613671576040805162461bcd60e51b815260206004820152600e60248201526d0ecc2d8eaca40dad2e6dac2e8c6d60931b604482015290519081900360640190fd5b50919050565b60008060006136846149c7565b6129798686614968565b60008060008061369e8787612f75565b909250905060008260038111156136b157fe5b146136c25750915060009050612fef565b612fe88186612e84565b60006136d66149c7565b6000806136eb86670de0b6b3a764000061406d565b909250905060008260038111156136fe57fe5b1461371d5750604080516020810190915260008152909250905061259c565b60008061372a83886140ac565b9092509050600082600381111561373d57fe5b1461375f5750604080516020810190915260008152909450925061259c915050565b604080516020810190915290815260009890975095505050505050565b51670de0b6b3a7640000900490565b60055460408051631200453160e11b81523060048201526001600160a01b0386811660248301528581166044830152606482018590529151600093849384939116916324008a629160848082019260209290919082900301818787803b1580156137f457600080fd5b505af1158015613808573d6000803e3d6000fd5b505050506040513d602081101561381e57600080fd5b505190508015613842576138356003603883612f0f565b925060009150612fef9050565b61384a612d0b565b6009541461385e57613835600a60396120dd565b613866614a96565b6001600160a01b038616600090815260106020526040902060010154606082015261389086612c57565b60808301819052602083018260038111156138a757fe5b60038111156138b257fe5b90525060009050816020015160038111156138c957fe5b146138f3576138e560096037836020015160038111156118eb57fe5b935060009250612fef915050565b60001985141561390c5760808101516040820152613914565b604081018590525b6139228782604001516135db565b60e08201819052608082015161393791612e84565b60a083018190526020830182600381111561394e57fe5b600381111561395957fe5b905250600090508160200151600381111561397057fe5b146139ac5760405162461bcd60e51b815260040180806020018281038252603a815260200180614c1b603a913960400191505060405180910390fd5b6139bc600b548260e00151612e84565b60c08301819052602083018260038111156139d357fe5b60038111156139de57fe5b90525060009050816020015160038111156139f557fe5b14613a315760405162461bcd60e51b8152600401808060200182810382526031815260200180614c756031913960400191505060405180910390fd5b60a080820180516001600160a01b03808a16600081815260106020908152604091829020948555600a5460019095019490945560c0870151600b81905560e088015195518251948f16855294840192909252828101949094526060820192909252608081019190915290517f1a2a22cb034d26d1854bdc6666a5b91fe25efbbb5dcad3b0355478d6f5c362a1929181900390910190a160055460e0820151606083015160408051631ededc9160e01b81523060048201526001600160a01b038c811660248301528b8116604483015260648201949094526084810192909252519190921691631ededc919160a480830192600092919082900301818387803b158015613b3c57600080fd5b505af1158015613b50573d6000803e3d6000fd5b5060009250613b5d915050565b8160e00151935093505050935093915050565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611b1a573d6000803e3d6000fd5b6000821580613bb3575081155b613bee5760405162461bcd60e51b8152600401808060200182810382526034815260200180614d366034913960400191505060405180910390fd5b613bf6614a58565b613bfe6125a3565b6040830181905260208301826003811115613c1557fe5b6003811115613c2057fe5b9052506000905081602001516003811115613c3757fe5b14613c5b57613c536009602b836020015160038111156118eb57fe5b915050611286565b8315613cdc576060810184905260408051602081018252908201518152613c829085612962565b6080830181905260208301826003811115613c9957fe5b6003811115613ca457fe5b9052506000905081602001516003811115613cbb57fe5b14613cd757613c5360096029836020015160038111156118eb57fe5b613d55565b613cf88360405180602001604052808460400151815250613677565b6060830181905260208301826003811115613d0f57fe5b6003811115613d1a57fe5b9052506000905081602001516003811115613d3157fe5b14613d4d57613c536009602a836020015160038111156118eb57fe5b608081018390525b60055460608201516040805163eabe7d9160e01b81523060048201526001600160a01b03898116602483015260448201939093529051600093929092169163eabe7d919160648082019260209290919082900301818787803b158015613dba57600080fd5b505af1158015613dce573d6000803e3d6000fd5b505050506040513d6020811015613de457600080fd5b505190508015613e0457613dfb6003602883612f0f565b92505050611286565b613e0c612d0b565b60095414613e2057613dfb600a602c6120dd565b613e30600d548360600151612e84565b60a0840181905260208401826003811115613e4757fe5b6003811115613e5257fe5b9052506000905082602001516003811115613e6957fe5b14613e8557613dfb6009602e846020015160038111156118eb57fe5b6001600160a01b0386166000908152600e60205260409020546060830151613ead9190612e84565b60c0840181905260208401826003811115613ec457fe5b6003811115613ecf57fe5b9052506000905082602001516003811115613ee657fe5b14613f0257613dfb6009602d846020015160038111156118eb57fe5b8160800151613f0f6129b5565b1015613f2157613dfb600e602f6120dd565b613f2f868360800151613b70565b60a0820151600d5560c08201516001600160a01b0387166000818152600e6020908152604091829020939093556060850151815190815290513093600080516020614c55833981519152928290030190a36080820151606080840151604080516001600160a01b038b168152602081019490945283810191909152517fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a9299281900390910190a160055460808301516060840151604080516351dff98960e01b81523060048201526001600160a01b038b81166024830152604482019490945260648101929092525191909216916351dff98991608480830192600092919082900301818387803b15801561404257600080fd5b505af1158015614056573d6000803e3d6000fd5b5060009250614063915050565b9695505050505050565b600080836140805750600090508061259c565b8383028385828161408d57fe5b04146140a15750600291506000905061259c565b60009250905061259c565b600080826140c0575060019050600061259c565b60008385816140cb57fe5b04915091509250929050565b60055460408051632fe3f38f60e11b81523060048201526001600160a01b0384811660248301528781166044830152868116606483015260848201869052915160009384938493911691635fc7e71e9160a48082019260209290919082900301818787803b15801561414857600080fd5b505af115801561415c573d6000803e3d6000fd5b505050506040513d602081101561417257600080fd5b505190508015614196576141896003601283612f0f565b9250600091506146519050565b61419e612d0b565b600954146141b257614189600a60166120dd565b6141ba612d0b565b846001600160a01b0316636c540baf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156141f357600080fd5b505afa158015614207573d6000803e3d6000fd5b505050506040513d602081101561421d57600080fd5b50511461423057614189600a60116120dd565b866001600160a01b0316866001600160a01b0316141561425657614189600660176120dd565b8461426757614189600760156120dd565b60001985141561427d57614189600760146120dd565b60008061428b89898961378b565b909250905081156142bb576142ac8260118111156142a557fe5b60186120dd565b94506000935061465192505050565b6005546040805163c488847b60e01b81523060048201526001600160a01b038981166024830152604482018590528251600094859492169263c488847b926064808301939192829003018186803b15801561431557600080fd5b505afa158015614329573d6000803e3d6000fd5b505050506040513d604081101561433f57600080fd5b5080516020909101519092509050811561438a5760405162461bcd60e51b8152600401808060200182810382526033815260200180614ca66033913960400191505060405180910390fd5b80886001600160a01b03166370a082318c6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b1580156143e157600080fd5b505afa1580156143f5573d6000803e3d6000fd5b505050506040513d602081101561440b57600080fd5b50511015614460576040805162461bcd60e51b815260206004820152601860248201527f4c49515549444154455f5345495a455f544f4f5f4d5543480000000000000000604482015290519081900360640190fd5b60006001600160a01b0389163014156144865761447f308d8d85613129565b9050614510565b6040805163b2a02ff160e01b81526001600160a01b038e811660048301528d81166024830152604482018590529151918b169163b2a02ff1916064808201926020929091908290030181600087803b1580156144e157600080fd5b505af11580156144f5573d6000803e3d6000fd5b505050506040513d602081101561450b57600080fd5b505190505b801561455a576040805162461bcd60e51b81526020600482015260146024820152731d1bdad95b881cd95a5e9d5c994819985a5b195960621b604482015290519081900360640190fd5b604080516001600160a01b03808f168252808e1660208301528183018790528b1660608201526080810184905290517f298637f684da70674f26509b10f07ec2fbc77a335ab1e7d6215a4b2484d8bb529181900360a00190a1600554604080516347ef3b3b60e01b81523060048201526001600160a01b038c811660248301528f811660448301528e811660648301526084820188905260a48201869052915191909216916347ef3b3b9160c480830192600092919082900301818387803b15801561462557600080fd5b505af1158015614639573d6000803e3d6000fd5b5060009250614646915050565b975092955050505050505b94509492505050565b6005546040805163368f515360e21b81523060048201526001600160a01b0385811660248301526044820185905291516000938493169163da3d454c91606480830192602092919082900301818787803b1580156146b757600080fd5b505af11580156146cb573d6000803e3d6000fd5b505050506040513d60208110156146e157600080fd5b505190508015614700576146f86003600e83612f0f565b915050610e6f565b614708612d0b565b6009541461471b576146f8600a806120dd565b826147246129b5565b1015614736576146f8600e60096120dd565b61473e614adc565b61474785612c57565b602083018190528282600381111561475b57fe5b600381111561476657fe5b905250600090508151600381111561477a57fe5b1461479f5761479660096007836000015160038111156118eb57fe5b92505050610e6f565b6147ad816020015185612f75565b60408301819052828260038111156147c157fe5b60038111156147cc57fe5b90525060009050815160038111156147e057fe5b146147fc576147966009600c836000015160038111156118eb57fe5b614808600b5485612f75565b606083018190528282600381111561481c57fe5b600381111561482757fe5b905250600090508151600381111561483b57fe5b14614857576147966009600b836000015160038111156118eb57fe5b6148618585613b70565b604080820180516001600160a01b03881660008181526010602090815290859020928355600a54600190930192909255606080860151600b81905593518551928352928201899052818501929092529081019190915290517f13ed6866d4e1ee6da46f845c46d7e54120883d75c5ea9a2dacc1c4ca8984ab809181900360800190a160055460408051635c77860560e01b81523060048201526001600160a01b0388811660248301526044820188905291519190921691635c77860591606480830192600092919082900301818387803b15801561493e57600080fd5b505af1158015614952573d6000803e3d6000fd5b506000925061495f915050565b95945050505050565b60006149726149c7565b600080614987670de0b6b3a76400008761406d565b9092509050600082600381111561499a57fe5b146149b95750604080516020810190915260008152909250905061259c565b6129a88186600001516136cc565b6040518060200160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614a1b57805160ff1916838001178555614a48565b82800160010185558215614a48579182015b82811115614a48578251825591602001919060010190614a2d565b50614a54929150614b05565b5090565b6040805160e0810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805161010081019091528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516080810190915280600081526020016000815260200160008152602001600081525090565b610fdf91905b80821115614a545760008155600101614b0b56fe6f6e6c792061646d696e206d617920696e697469616c697a6520746865206d61726b65746d61726b6574206d6179206f6e6c7920626520696e697469616c697a6564206f6e6365696e697469616c2065786368616e67652072617465206d7573742062652067726561746572207468616e207a65726f2e73657474696e6720696e7465726573742072617465206d6f64656c206661696c65644d494e545f4e45575f4143434f554e545f42414c414e43455f43414c43554c4154494f4e5f4641494c4544626f72726f7742616c616e636553746f7265643a20626f72726f7742616c616e636553746f726564496e7465726e616c206661696c656452455041595f424f52524f575f4e45575f4143434f554e545f424f52524f575f42414c414e43455f43414c43554c4154494f4e5f4641494c4544ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef52455041595f424f52524f575f4e45575f544f54414c5f42414c414e43455f43414c43554c4154494f4e5f4641494c45444c49515549444154455f434f4d5054524f4c4c45525f43414c43554c4154455f414d4f554e545f5345495a455f4641494c454465786368616e67655261746553746f7265643a2065786368616e67655261746553746f726564496e7465726e616c206661696c65644d494e545f4e45575f544f54414c5f535550504c595f43414c43554c4154494f4e5f4641494c45446f6e65206f662072656465656d546f6b656e73496e206f722072656465656d416d6f756e74496e206d757374206265207a65726f72656475636520726573657276657320756e657870656374656420756e646572666c6f77a265627a7a72315820df0284085f4d424eea660a511f5369545cf9b326126f19ac8881bf6fef4e0c6d64736f6c634300051100326f6e6c792061646d696e206d617920696e697469616c697a6520746865206d61726b65746d61726b6574206d6179206f6e6c7920626520696e697469616c697a6564206f6e6365696e697469616c2065786368616e67652072617465206d7573742062652067726561746572207468616e207a65726f2e73657474696e6720696e7465726573742072617465206d6f64656c206661696c6564000000000000000000000000fd36e2c2a6789db23113685031d7f1632915838400000000000000000000000049fade95f94e5ec7c1f4ae13a6d6f9ca18b2f430000000000000000000000000000000000000000000a56fa5b99019a5c800000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000080000000000000000000000001ca3ac3686071be692be7f1fbecd668641476d7e000000000000000000000000000000000000000000000000000000000000000956656e757320424e420000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000476424e4200000000000000000000000000000000000000000000000000000000"

// DeployVbnb deploys a new Ethereum contract, binding an instance of Vbnb to it.
func DeployVbnb(auth *bind.TransactOpts, backend bind.ContractBackend, comptroller_ common.Address, interestRateModel_ common.Address, initialExchangeRateMantissa_ *big.Int, name_ string, symbol_ string, decimals_ uint8, admin_ common.Address) (common.Address, *types.Transaction, *Vbnb, error) {
	parsed, err := abi.JSON(strings.NewReader(VbnbABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(VbnbBin), backend, comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_, admin_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Vbnb{VbnbCaller: VbnbCaller{contract: contract}, VbnbTransactor: VbnbTransactor{contract: contract}, VbnbFilterer: VbnbFilterer{contract: contract}}, nil
}

// Vbnb is an auto generated Go binding around an Ethereum contract.
type Vbnb struct {
	VbnbCaller     // Read-only binding to the contract
	VbnbTransactor // Write-only binding to the contract
	VbnbFilterer   // Log filterer for contract events
}

// VbnbCaller is an auto generated read-only Go binding around an Ethereum contract.
type VbnbCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VbnbTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VbnbTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VbnbFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VbnbFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VbnbSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VbnbSession struct {
	Contract     *Vbnb             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VbnbCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VbnbCallerSession struct {
	Contract *VbnbCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// VbnbTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VbnbTransactorSession struct {
	Contract     *VbnbTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VbnbRaw is an auto generated low-level Go binding around an Ethereum contract.
type VbnbRaw struct {
	Contract *Vbnb // Generic contract binding to access the raw methods on
}

// VbnbCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VbnbCallerRaw struct {
	Contract *VbnbCaller // Generic read-only contract binding to access the raw methods on
}

// VbnbTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VbnbTransactorRaw struct {
	Contract *VbnbTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVbnb creates a new instance of Vbnb, bound to a specific deployed contract.
func NewVbnb(address common.Address, backend bind.ContractBackend) (*Vbnb, error) {
	contract, err := bindVbnb(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Vbnb{VbnbCaller: VbnbCaller{contract: contract}, VbnbTransactor: VbnbTransactor{contract: contract}, VbnbFilterer: VbnbFilterer{contract: contract}}, nil
}

// NewVbnbCaller creates a new read-only instance of Vbnb, bound to a specific deployed contract.
func NewVbnbCaller(address common.Address, caller bind.ContractCaller) (*VbnbCaller, error) {
	contract, err := bindVbnb(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VbnbCaller{contract: contract}, nil
}

// NewVbnbTransactor creates a new write-only instance of Vbnb, bound to a specific deployed contract.
func NewVbnbTransactor(address common.Address, transactor bind.ContractTransactor) (*VbnbTransactor, error) {
	contract, err := bindVbnb(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VbnbTransactor{contract: contract}, nil
}

// NewVbnbFilterer creates a new log filterer instance of Vbnb, bound to a specific deployed contract.
func NewVbnbFilterer(address common.Address, filterer bind.ContractFilterer) (*VbnbFilterer, error) {
	contract, err := bindVbnb(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VbnbFilterer{contract: contract}, nil
}

// bindVbnb binds a generic wrapper to an already deployed contract.
func bindVbnb(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(VbnbABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Vbnb *VbnbRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Vbnb.Contract.VbnbCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Vbnb *VbnbRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vbnb.Contract.VbnbTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Vbnb *VbnbRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Vbnb.Contract.VbnbTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Vbnb *VbnbCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Vbnb.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Vbnb *VbnbTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vbnb.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Vbnb *VbnbTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Vbnb.Contract.contract.Transact(opts, method, params...)
}

// AccrualBlockNumber is a free data retrieval call binding the contract method 0x6c540baf.
//
// Solidity: function accrualBlockNumber() view returns(uint256)
func (_Vbnb *VbnbCaller) AccrualBlockNumber(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Vbnb.contract.Call(opts, &out, "accrualBlockNumber")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AccrualBlockNumber is a free data retrieval call binding the contract method 0x6c540baf.
//
// Solidity: function accrualBlockNumber() view returns(uint256)
func (_Vbnb *VbnbSession) AccrualBlockNumber() (*big.Int, error) {
	return _Vbnb.Contract.AccrualBlockNumber(&_Vbnb.CallOpts)
}

// AccrualBlockNumber is a free data retrieval call binding the contract method 0x6c540baf.
//
// Solidity: function accrualBlockNumber() view returns(uint256)
func (_Vbnb *VbnbCallerSession) AccrualBlockNumber() (*big.Int, error) {
	return _Vbnb.Contract.AccrualBlockNumber(&_Vbnb.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Vbnb *VbnbCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Vbnb.contract.Call(opts, &out, "admin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Vbnb *VbnbSession) Admin() (common.Address, error) {
	return _Vbnb.Contract.Admin(&_Vbnb.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Vbnb *VbnbCallerSession) Admin() (common.Address, error) {
	return _Vbnb.Contract.Admin(&_Vbnb.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Vbnb *VbnbCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Vbnb.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Vbnb *VbnbSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Vbnb.Contract.Allowance(&_Vbnb.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Vbnb *VbnbCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Vbnb.Contract.Allowance(&_Vbnb.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Vbnb *VbnbCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Vbnb.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Vbnb *VbnbSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Vbnb.Contract.BalanceOf(&_Vbnb.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Vbnb *VbnbCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Vbnb.Contract.BalanceOf(&_Vbnb.CallOpts, owner)
}

// BorrowBalanceStored is a free data retrieval call binding the contract method 0x95dd9193.
//
// Solidity: function borrowBalanceStored(address account) view returns(uint256)
func (_Vbnb *VbnbCaller) BorrowBalanceStored(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Vbnb.contract.Call(opts, &out, "borrowBalanceStored", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BorrowBalanceStored is a free data retrieval call binding the contract method 0x95dd9193.
//
// Solidity: function borrowBalanceStored(address account) view returns(uint256)
func (_Vbnb *VbnbSession) BorrowBalanceStored(account common.Address) (*big.Int, error) {
	return _Vbnb.Contract.BorrowBalanceStored(&_Vbnb.CallOpts, account)
}

// BorrowBalanceStored is a free data retrieval call binding the contract method 0x95dd9193.
//
// Solidity: function borrowBalanceStored(address account) view returns(uint256)
func (_Vbnb *VbnbCallerSession) BorrowBalanceStored(account common.Address) (*big.Int, error) {
	return _Vbnb.Contract.BorrowBalanceStored(&_Vbnb.CallOpts, account)
}

// BorrowIndex is a free data retrieval call binding the contract method 0xaa5af0fd.
//
// Solidity: function borrowIndex() view returns(uint256)
func (_Vbnb *VbnbCaller) BorrowIndex(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Vbnb.contract.Call(opts, &out, "borrowIndex")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BorrowIndex is a free data retrieval call binding the contract method 0xaa5af0fd.
//
// Solidity: function borrowIndex() view returns(uint256)
func (_Vbnb *VbnbSession) BorrowIndex() (*big.Int, error) {
	return _Vbnb.Contract.BorrowIndex(&_Vbnb.CallOpts)
}

// BorrowIndex is a free data retrieval call binding the contract method 0xaa5af0fd.
//
// Solidity: function borrowIndex() view returns(uint256)
func (_Vbnb *VbnbCallerSession) BorrowIndex() (*big.Int, error) {
	return _Vbnb.Contract.BorrowIndex(&_Vbnb.CallOpts)
}

// BorrowRatePerBlock is a free data retrieval call binding the contract method 0xf8f9da28.
//
// Solidity: function borrowRatePerBlock() view returns(uint256)
func (_Vbnb *VbnbCaller) BorrowRatePerBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Vbnb.contract.Call(opts, &out, "borrowRatePerBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BorrowRatePerBlock is a free data retrieval call binding the contract method 0xf8f9da28.
//
// Solidity: function borrowRatePerBlock() view returns(uint256)
func (_Vbnb *VbnbSession) BorrowRatePerBlock() (*big.Int, error) {
	return _Vbnb.Contract.BorrowRatePerBlock(&_Vbnb.CallOpts)
}

// BorrowRatePerBlock is a free data retrieval call binding the contract method 0xf8f9da28.
//
// Solidity: function borrowRatePerBlock() view returns(uint256)
func (_Vbnb *VbnbCallerSession) BorrowRatePerBlock() (*big.Int, error) {
	return _Vbnb.Contract.BorrowRatePerBlock(&_Vbnb.CallOpts)
}

// Comptroller is a free data retrieval call binding the contract method 0x5fe3b567.
//
// Solidity: function comptroller() view returns(address)
func (_Vbnb *VbnbCaller) Comptroller(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Vbnb.contract.Call(opts, &out, "comptroller")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Comptroller is a free data retrieval call binding the contract method 0x5fe3b567.
//
// Solidity: function comptroller() view returns(address)
func (_Vbnb *VbnbSession) Comptroller() (common.Address, error) {
	return _Vbnb.Contract.Comptroller(&_Vbnb.CallOpts)
}

// Comptroller is a free data retrieval call binding the contract method 0x5fe3b567.
//
// Solidity: function comptroller() view returns(address)
func (_Vbnb *VbnbCallerSession) Comptroller() (common.Address, error) {
	return _Vbnb.Contract.Comptroller(&_Vbnb.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Vbnb *VbnbCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Vbnb.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Vbnb *VbnbSession) Decimals() (uint8, error) {
	return _Vbnb.Contract.Decimals(&_Vbnb.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Vbnb *VbnbCallerSession) Decimals() (uint8, error) {
	return _Vbnb.Contract.Decimals(&_Vbnb.CallOpts)
}

// ExchangeRateStored is a free data retrieval call binding the contract method 0x182df0f5.
//
// Solidity: function exchangeRateStored() view returns(uint256)
func (_Vbnb *VbnbCaller) ExchangeRateStored(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Vbnb.contract.Call(opts, &out, "exchangeRateStored")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ExchangeRateStored is a free data retrieval call binding the contract method 0x182df0f5.
//
// Solidity: function exchangeRateStored() view returns(uint256)
func (_Vbnb *VbnbSession) ExchangeRateStored() (*big.Int, error) {
	return _Vbnb.Contract.ExchangeRateStored(&_Vbnb.CallOpts)
}

// ExchangeRateStored is a free data retrieval call binding the contract method 0x182df0f5.
//
// Solidity: function exchangeRateStored() view returns(uint256)
func (_Vbnb *VbnbCallerSession) ExchangeRateStored() (*big.Int, error) {
	return _Vbnb.Contract.ExchangeRateStored(&_Vbnb.CallOpts)
}

// GetAccountSnapshot is a free data retrieval call binding the contract method 0xc37f68e2.
//
// Solidity: function getAccountSnapshot(address account) view returns(uint256, uint256, uint256, uint256)
func (_Vbnb *VbnbCaller) GetAccountSnapshot(opts *bind.CallOpts, account common.Address) (*big.Int, *big.Int, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _Vbnb.contract.Call(opts, &out, "getAccountSnapshot", account)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return out0, out1, out2, out3, err

}

// GetAccountSnapshot is a free data retrieval call binding the contract method 0xc37f68e2.
//
// Solidity: function getAccountSnapshot(address account) view returns(uint256, uint256, uint256, uint256)
func (_Vbnb *VbnbSession) GetAccountSnapshot(account common.Address) (*big.Int, *big.Int, *big.Int, *big.Int, error) {
	return _Vbnb.Contract.GetAccountSnapshot(&_Vbnb.CallOpts, account)
}

// GetAccountSnapshot is a free data retrieval call binding the contract method 0xc37f68e2.
//
// Solidity: function getAccountSnapshot(address account) view returns(uint256, uint256, uint256, uint256)
func (_Vbnb *VbnbCallerSession) GetAccountSnapshot(account common.Address) (*big.Int, *big.Int, *big.Int, *big.Int, error) {
	return _Vbnb.Contract.GetAccountSnapshot(&_Vbnb.CallOpts, account)
}

// GetCash is a free data retrieval call binding the contract method 0x3b1d21a2.
//
// Solidity: function getCash() view returns(uint256)
func (_Vbnb *VbnbCaller) GetCash(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Vbnb.contract.Call(opts, &out, "getCash")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCash is a free data retrieval call binding the contract method 0x3b1d21a2.
//
// Solidity: function getCash() view returns(uint256)
func (_Vbnb *VbnbSession) GetCash() (*big.Int, error) {
	return _Vbnb.Contract.GetCash(&_Vbnb.CallOpts)
}

// GetCash is a free data retrieval call binding the contract method 0x3b1d21a2.
//
// Solidity: function getCash() view returns(uint256)
func (_Vbnb *VbnbCallerSession) GetCash() (*big.Int, error) {
	return _Vbnb.Contract.GetCash(&_Vbnb.CallOpts)
}

// InterestRateModel is a free data retrieval call binding the contract method 0xf3fdb15a.
//
// Solidity: function interestRateModel() view returns(address)
func (_Vbnb *VbnbCaller) InterestRateModel(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Vbnb.contract.Call(opts, &out, "interestRateModel")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// InterestRateModel is a free data retrieval call binding the contract method 0xf3fdb15a.
//
// Solidity: function interestRateModel() view returns(address)
func (_Vbnb *VbnbSession) InterestRateModel() (common.Address, error) {
	return _Vbnb.Contract.InterestRateModel(&_Vbnb.CallOpts)
}

// InterestRateModel is a free data retrieval call binding the contract method 0xf3fdb15a.
//
// Solidity: function interestRateModel() view returns(address)
func (_Vbnb *VbnbCallerSession) InterestRateModel() (common.Address, error) {
	return _Vbnb.Contract.InterestRateModel(&_Vbnb.CallOpts)
}

// IsVToken is a free data retrieval call binding the contract method 0x3d9ea3a1.
//
// Solidity: function isVToken() view returns(bool)
func (_Vbnb *VbnbCaller) IsVToken(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Vbnb.contract.Call(opts, &out, "isVToken")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsVToken is a free data retrieval call binding the contract method 0x3d9ea3a1.
//
// Solidity: function isVToken() view returns(bool)
func (_Vbnb *VbnbSession) IsVToken() (bool, error) {
	return _Vbnb.Contract.IsVToken(&_Vbnb.CallOpts)
}

// IsVToken is a free data retrieval call binding the contract method 0x3d9ea3a1.
//
// Solidity: function isVToken() view returns(bool)
func (_Vbnb *VbnbCallerSession) IsVToken() (bool, error) {
	return _Vbnb.Contract.IsVToken(&_Vbnb.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Vbnb *VbnbCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Vbnb.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Vbnb *VbnbSession) Name() (string, error) {
	return _Vbnb.Contract.Name(&_Vbnb.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Vbnb *VbnbCallerSession) Name() (string, error) {
	return _Vbnb.Contract.Name(&_Vbnb.CallOpts)
}

// PendingAdmin is a free data retrieval call binding the contract method 0x26782247.
//
// Solidity: function pendingAdmin() view returns(address)
func (_Vbnb *VbnbCaller) PendingAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Vbnb.contract.Call(opts, &out, "pendingAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingAdmin is a free data retrieval call binding the contract method 0x26782247.
//
// Solidity: function pendingAdmin() view returns(address)
func (_Vbnb *VbnbSession) PendingAdmin() (common.Address, error) {
	return _Vbnb.Contract.PendingAdmin(&_Vbnb.CallOpts)
}

// PendingAdmin is a free data retrieval call binding the contract method 0x26782247.
//
// Solidity: function pendingAdmin() view returns(address)
func (_Vbnb *VbnbCallerSession) PendingAdmin() (common.Address, error) {
	return _Vbnb.Contract.PendingAdmin(&_Vbnb.CallOpts)
}

// ReserveFactorMantissa is a free data retrieval call binding the contract method 0x173b9904.
//
// Solidity: function reserveFactorMantissa() view returns(uint256)
func (_Vbnb *VbnbCaller) ReserveFactorMantissa(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Vbnb.contract.Call(opts, &out, "reserveFactorMantissa")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ReserveFactorMantissa is a free data retrieval call binding the contract method 0x173b9904.
//
// Solidity: function reserveFactorMantissa() view returns(uint256)
func (_Vbnb *VbnbSession) ReserveFactorMantissa() (*big.Int, error) {
	return _Vbnb.Contract.ReserveFactorMantissa(&_Vbnb.CallOpts)
}

// ReserveFactorMantissa is a free data retrieval call binding the contract method 0x173b9904.
//
// Solidity: function reserveFactorMantissa() view returns(uint256)
func (_Vbnb *VbnbCallerSession) ReserveFactorMantissa() (*big.Int, error) {
	return _Vbnb.Contract.ReserveFactorMantissa(&_Vbnb.CallOpts)
}

// SupplyRatePerBlock is a free data retrieval call binding the contract method 0xae9d70b0.
//
// Solidity: function supplyRatePerBlock() view returns(uint256)
func (_Vbnb *VbnbCaller) SupplyRatePerBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Vbnb.contract.Call(opts, &out, "supplyRatePerBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SupplyRatePerBlock is a free data retrieval call binding the contract method 0xae9d70b0.
//
// Solidity: function supplyRatePerBlock() view returns(uint256)
func (_Vbnb *VbnbSession) SupplyRatePerBlock() (*big.Int, error) {
	return _Vbnb.Contract.SupplyRatePerBlock(&_Vbnb.CallOpts)
}

// SupplyRatePerBlock is a free data retrieval call binding the contract method 0xae9d70b0.
//
// Solidity: function supplyRatePerBlock() view returns(uint256)
func (_Vbnb *VbnbCallerSession) SupplyRatePerBlock() (*big.Int, error) {
	return _Vbnb.Contract.SupplyRatePerBlock(&_Vbnb.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Vbnb *VbnbCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Vbnb.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Vbnb *VbnbSession) Symbol() (string, error) {
	return _Vbnb.Contract.Symbol(&_Vbnb.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Vbnb *VbnbCallerSession) Symbol() (string, error) {
	return _Vbnb.Contract.Symbol(&_Vbnb.CallOpts)
}

// TotalBorrows is a free data retrieval call binding the contract method 0x47bd3718.
//
// Solidity: function totalBorrows() view returns(uint256)
func (_Vbnb *VbnbCaller) TotalBorrows(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Vbnb.contract.Call(opts, &out, "totalBorrows")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalBorrows is a free data retrieval call binding the contract method 0x47bd3718.
//
// Solidity: function totalBorrows() view returns(uint256)
func (_Vbnb *VbnbSession) TotalBorrows() (*big.Int, error) {
	return _Vbnb.Contract.TotalBorrows(&_Vbnb.CallOpts)
}

// TotalBorrows is a free data retrieval call binding the contract method 0x47bd3718.
//
// Solidity: function totalBorrows() view returns(uint256)
func (_Vbnb *VbnbCallerSession) TotalBorrows() (*big.Int, error) {
	return _Vbnb.Contract.TotalBorrows(&_Vbnb.CallOpts)
}

// TotalReserves is a free data retrieval call binding the contract method 0x8f840ddd.
//
// Solidity: function totalReserves() view returns(uint256)
func (_Vbnb *VbnbCaller) TotalReserves(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Vbnb.contract.Call(opts, &out, "totalReserves")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalReserves is a free data retrieval call binding the contract method 0x8f840ddd.
//
// Solidity: function totalReserves() view returns(uint256)
func (_Vbnb *VbnbSession) TotalReserves() (*big.Int, error) {
	return _Vbnb.Contract.TotalReserves(&_Vbnb.CallOpts)
}

// TotalReserves is a free data retrieval call binding the contract method 0x8f840ddd.
//
// Solidity: function totalReserves() view returns(uint256)
func (_Vbnb *VbnbCallerSession) TotalReserves() (*big.Int, error) {
	return _Vbnb.Contract.TotalReserves(&_Vbnb.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Vbnb *VbnbCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Vbnb.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Vbnb *VbnbSession) TotalSupply() (*big.Int, error) {
	return _Vbnb.Contract.TotalSupply(&_Vbnb.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Vbnb *VbnbCallerSession) TotalSupply() (*big.Int, error) {
	return _Vbnb.Contract.TotalSupply(&_Vbnb.CallOpts)
}

// AcceptAdmin is a paid mutator transaction binding the contract method 0xe9c714f2.
//
// Solidity: function _acceptAdmin() returns(uint256)
func (_Vbnb *VbnbTransactor) AcceptAdmin(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vbnb.contract.Transact(opts, "_acceptAdmin")
}

// AcceptAdmin is a paid mutator transaction binding the contract method 0xe9c714f2.
//
// Solidity: function _acceptAdmin() returns(uint256)
func (_Vbnb *VbnbSession) AcceptAdmin() (*types.Transaction, error) {
	return _Vbnb.Contract.AcceptAdmin(&_Vbnb.TransactOpts)
}

// AcceptAdmin is a paid mutator transaction binding the contract method 0xe9c714f2.
//
// Solidity: function _acceptAdmin() returns(uint256)
func (_Vbnb *VbnbTransactorSession) AcceptAdmin() (*types.Transaction, error) {
	return _Vbnb.Contract.AcceptAdmin(&_Vbnb.TransactOpts)
}

// ReduceReserves is a paid mutator transaction binding the contract method 0x601a0bf1.
//
// Solidity: function _reduceReserves(uint256 reduceAmount) returns(uint256)
func (_Vbnb *VbnbTransactor) ReduceReserves(opts *bind.TransactOpts, reduceAmount *big.Int) (*types.Transaction, error) {
	return _Vbnb.contract.Transact(opts, "_reduceReserves", reduceAmount)
}

// ReduceReserves is a paid mutator transaction binding the contract method 0x601a0bf1.
//
// Solidity: function _reduceReserves(uint256 reduceAmount) returns(uint256)
func (_Vbnb *VbnbSession) ReduceReserves(reduceAmount *big.Int) (*types.Transaction, error) {
	return _Vbnb.Contract.ReduceReserves(&_Vbnb.TransactOpts, reduceAmount)
}

// ReduceReserves is a paid mutator transaction binding the contract method 0x601a0bf1.
//
// Solidity: function _reduceReserves(uint256 reduceAmount) returns(uint256)
func (_Vbnb *VbnbTransactorSession) ReduceReserves(reduceAmount *big.Int) (*types.Transaction, error) {
	return _Vbnb.Contract.ReduceReserves(&_Vbnb.TransactOpts, reduceAmount)
}

// SetComptroller is a paid mutator transaction binding the contract method 0x4576b5db.
//
// Solidity: function _setComptroller(address newComptroller) returns(uint256)
func (_Vbnb *VbnbTransactor) SetComptroller(opts *bind.TransactOpts, newComptroller common.Address) (*types.Transaction, error) {
	return _Vbnb.contract.Transact(opts, "_setComptroller", newComptroller)
}

// SetComptroller is a paid mutator transaction binding the contract method 0x4576b5db.
//
// Solidity: function _setComptroller(address newComptroller) returns(uint256)
func (_Vbnb *VbnbSession) SetComptroller(newComptroller common.Address) (*types.Transaction, error) {
	return _Vbnb.Contract.SetComptroller(&_Vbnb.TransactOpts, newComptroller)
}

// SetComptroller is a paid mutator transaction binding the contract method 0x4576b5db.
//
// Solidity: function _setComptroller(address newComptroller) returns(uint256)
func (_Vbnb *VbnbTransactorSession) SetComptroller(newComptroller common.Address) (*types.Transaction, error) {
	return _Vbnb.Contract.SetComptroller(&_Vbnb.TransactOpts, newComptroller)
}

// SetInterestRateModel is a paid mutator transaction binding the contract method 0xf2b3abbd.
//
// Solidity: function _setInterestRateModel(address newInterestRateModel) returns(uint256)
func (_Vbnb *VbnbTransactor) SetInterestRateModel(opts *bind.TransactOpts, newInterestRateModel common.Address) (*types.Transaction, error) {
	return _Vbnb.contract.Transact(opts, "_setInterestRateModel", newInterestRateModel)
}

// SetInterestRateModel is a paid mutator transaction binding the contract method 0xf2b3abbd.
//
// Solidity: function _setInterestRateModel(address newInterestRateModel) returns(uint256)
func (_Vbnb *VbnbSession) SetInterestRateModel(newInterestRateModel common.Address) (*types.Transaction, error) {
	return _Vbnb.Contract.SetInterestRateModel(&_Vbnb.TransactOpts, newInterestRateModel)
}

// SetInterestRateModel is a paid mutator transaction binding the contract method 0xf2b3abbd.
//
// Solidity: function _setInterestRateModel(address newInterestRateModel) returns(uint256)
func (_Vbnb *VbnbTransactorSession) SetInterestRateModel(newInterestRateModel common.Address) (*types.Transaction, error) {
	return _Vbnb.Contract.SetInterestRateModel(&_Vbnb.TransactOpts, newInterestRateModel)
}

// SetPendingAdmin is a paid mutator transaction binding the contract method 0xb71d1a0c.
//
// Solidity: function _setPendingAdmin(address newPendingAdmin) returns(uint256)
func (_Vbnb *VbnbTransactor) SetPendingAdmin(opts *bind.TransactOpts, newPendingAdmin common.Address) (*types.Transaction, error) {
	return _Vbnb.contract.Transact(opts, "_setPendingAdmin", newPendingAdmin)
}

// SetPendingAdmin is a paid mutator transaction binding the contract method 0xb71d1a0c.
//
// Solidity: function _setPendingAdmin(address newPendingAdmin) returns(uint256)
func (_Vbnb *VbnbSession) SetPendingAdmin(newPendingAdmin common.Address) (*types.Transaction, error) {
	return _Vbnb.Contract.SetPendingAdmin(&_Vbnb.TransactOpts, newPendingAdmin)
}

// SetPendingAdmin is a paid mutator transaction binding the contract method 0xb71d1a0c.
//
// Solidity: function _setPendingAdmin(address newPendingAdmin) returns(uint256)
func (_Vbnb *VbnbTransactorSession) SetPendingAdmin(newPendingAdmin common.Address) (*types.Transaction, error) {
	return _Vbnb.Contract.SetPendingAdmin(&_Vbnb.TransactOpts, newPendingAdmin)
}

// SetReserveFactor is a paid mutator transaction binding the contract method 0xfca7820b.
//
// Solidity: function _setReserveFactor(uint256 newReserveFactorMantissa) returns(uint256)
func (_Vbnb *VbnbTransactor) SetReserveFactor(opts *bind.TransactOpts, newReserveFactorMantissa *big.Int) (*types.Transaction, error) {
	return _Vbnb.contract.Transact(opts, "_setReserveFactor", newReserveFactorMantissa)
}

// SetReserveFactor is a paid mutator transaction binding the contract method 0xfca7820b.
//
// Solidity: function _setReserveFactor(uint256 newReserveFactorMantissa) returns(uint256)
func (_Vbnb *VbnbSession) SetReserveFactor(newReserveFactorMantissa *big.Int) (*types.Transaction, error) {
	return _Vbnb.Contract.SetReserveFactor(&_Vbnb.TransactOpts, newReserveFactorMantissa)
}

// SetReserveFactor is a paid mutator transaction binding the contract method 0xfca7820b.
//
// Solidity: function _setReserveFactor(uint256 newReserveFactorMantissa) returns(uint256)
func (_Vbnb *VbnbTransactorSession) SetReserveFactor(newReserveFactorMantissa *big.Int) (*types.Transaction, error) {
	return _Vbnb.Contract.SetReserveFactor(&_Vbnb.TransactOpts, newReserveFactorMantissa)
}

// AccrueInterest is a paid mutator transaction binding the contract method 0xa6afed95.
//
// Solidity: function accrueInterest() returns(uint256)
func (_Vbnb *VbnbTransactor) AccrueInterest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vbnb.contract.Transact(opts, "accrueInterest")
}

// AccrueInterest is a paid mutator transaction binding the contract method 0xa6afed95.
//
// Solidity: function accrueInterest() returns(uint256)
func (_Vbnb *VbnbSession) AccrueInterest() (*types.Transaction, error) {
	return _Vbnb.Contract.AccrueInterest(&_Vbnb.TransactOpts)
}

// AccrueInterest is a paid mutator transaction binding the contract method 0xa6afed95.
//
// Solidity: function accrueInterest() returns(uint256)
func (_Vbnb *VbnbTransactorSession) AccrueInterest() (*types.Transaction, error) {
	return _Vbnb.Contract.AccrueInterest(&_Vbnb.TransactOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Vbnb *VbnbTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vbnb.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Vbnb *VbnbSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vbnb.Contract.Approve(&_Vbnb.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Vbnb *VbnbTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vbnb.Contract.Approve(&_Vbnb.TransactOpts, spender, amount)
}

// BalanceOfUnderlying is a paid mutator transaction binding the contract method 0x3af9e669.
//
// Solidity: function balanceOfUnderlying(address owner) returns(uint256)
func (_Vbnb *VbnbTransactor) BalanceOfUnderlying(opts *bind.TransactOpts, owner common.Address) (*types.Transaction, error) {
	return _Vbnb.contract.Transact(opts, "balanceOfUnderlying", owner)
}

// BalanceOfUnderlying is a paid mutator transaction binding the contract method 0x3af9e669.
//
// Solidity: function balanceOfUnderlying(address owner) returns(uint256)
func (_Vbnb *VbnbSession) BalanceOfUnderlying(owner common.Address) (*types.Transaction, error) {
	return _Vbnb.Contract.BalanceOfUnderlying(&_Vbnb.TransactOpts, owner)
}

// BalanceOfUnderlying is a paid mutator transaction binding the contract method 0x3af9e669.
//
// Solidity: function balanceOfUnderlying(address owner) returns(uint256)
func (_Vbnb *VbnbTransactorSession) BalanceOfUnderlying(owner common.Address) (*types.Transaction, error) {
	return _Vbnb.Contract.BalanceOfUnderlying(&_Vbnb.TransactOpts, owner)
}

// Borrow is a paid mutator transaction binding the contract method 0xc5ebeaec.
//
// Solidity: function borrow(uint256 borrowAmount) returns(uint256)
func (_Vbnb *VbnbTransactor) Borrow(opts *bind.TransactOpts, borrowAmount *big.Int) (*types.Transaction, error) {
	return _Vbnb.contract.Transact(opts, "borrow", borrowAmount)
}

// Borrow is a paid mutator transaction binding the contract method 0xc5ebeaec.
//
// Solidity: function borrow(uint256 borrowAmount) returns(uint256)
func (_Vbnb *VbnbSession) Borrow(borrowAmount *big.Int) (*types.Transaction, error) {
	return _Vbnb.Contract.Borrow(&_Vbnb.TransactOpts, borrowAmount)
}

// Borrow is a paid mutator transaction binding the contract method 0xc5ebeaec.
//
// Solidity: function borrow(uint256 borrowAmount) returns(uint256)
func (_Vbnb *VbnbTransactorSession) Borrow(borrowAmount *big.Int) (*types.Transaction, error) {
	return _Vbnb.Contract.Borrow(&_Vbnb.TransactOpts, borrowAmount)
}

// BorrowBalanceCurrent is a paid mutator transaction binding the contract method 0x17bfdfbc.
//
// Solidity: function borrowBalanceCurrent(address account) returns(uint256)
func (_Vbnb *VbnbTransactor) BorrowBalanceCurrent(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _Vbnb.contract.Transact(opts, "borrowBalanceCurrent", account)
}

// BorrowBalanceCurrent is a paid mutator transaction binding the contract method 0x17bfdfbc.
//
// Solidity: function borrowBalanceCurrent(address account) returns(uint256)
func (_Vbnb *VbnbSession) BorrowBalanceCurrent(account common.Address) (*types.Transaction, error) {
	return _Vbnb.Contract.BorrowBalanceCurrent(&_Vbnb.TransactOpts, account)
}

// BorrowBalanceCurrent is a paid mutator transaction binding the contract method 0x17bfdfbc.
//
// Solidity: function borrowBalanceCurrent(address account) returns(uint256)
func (_Vbnb *VbnbTransactorSession) BorrowBalanceCurrent(account common.Address) (*types.Transaction, error) {
	return _Vbnb.Contract.BorrowBalanceCurrent(&_Vbnb.TransactOpts, account)
}

// ExchangeRateCurrent is a paid mutator transaction binding the contract method 0xbd6d894d.
//
// Solidity: function exchangeRateCurrent() returns(uint256)
func (_Vbnb *VbnbTransactor) ExchangeRateCurrent(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vbnb.contract.Transact(opts, "exchangeRateCurrent")
}

// ExchangeRateCurrent is a paid mutator transaction binding the contract method 0xbd6d894d.
//
// Solidity: function exchangeRateCurrent() returns(uint256)
func (_Vbnb *VbnbSession) ExchangeRateCurrent() (*types.Transaction, error) {
	return _Vbnb.Contract.ExchangeRateCurrent(&_Vbnb.TransactOpts)
}

// ExchangeRateCurrent is a paid mutator transaction binding the contract method 0xbd6d894d.
//
// Solidity: function exchangeRateCurrent() returns(uint256)
func (_Vbnb *VbnbTransactorSession) ExchangeRateCurrent() (*types.Transaction, error) {
	return _Vbnb.Contract.ExchangeRateCurrent(&_Vbnb.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x99d8c1b4.
//
// Solidity: function initialize(address comptroller_, address interestRateModel_, uint256 initialExchangeRateMantissa_, string name_, string symbol_, uint8 decimals_) returns()
func (_Vbnb *VbnbTransactor) Initialize(opts *bind.TransactOpts, comptroller_ common.Address, interestRateModel_ common.Address, initialExchangeRateMantissa_ *big.Int, name_ string, symbol_ string, decimals_ uint8) (*types.Transaction, error) {
	return _Vbnb.contract.Transact(opts, "initialize", comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_)
}

// Initialize is a paid mutator transaction binding the contract method 0x99d8c1b4.
//
// Solidity: function initialize(address comptroller_, address interestRateModel_, uint256 initialExchangeRateMantissa_, string name_, string symbol_, uint8 decimals_) returns()
func (_Vbnb *VbnbSession) Initialize(comptroller_ common.Address, interestRateModel_ common.Address, initialExchangeRateMantissa_ *big.Int, name_ string, symbol_ string, decimals_ uint8) (*types.Transaction, error) {
	return _Vbnb.Contract.Initialize(&_Vbnb.TransactOpts, comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_)
}

// Initialize is a paid mutator transaction binding the contract method 0x99d8c1b4.
//
// Solidity: function initialize(address comptroller_, address interestRateModel_, uint256 initialExchangeRateMantissa_, string name_, string symbol_, uint8 decimals_) returns()
func (_Vbnb *VbnbTransactorSession) Initialize(comptroller_ common.Address, interestRateModel_ common.Address, initialExchangeRateMantissa_ *big.Int, name_ string, symbol_ string, decimals_ uint8) (*types.Transaction, error) {
	return _Vbnb.Contract.Initialize(&_Vbnb.TransactOpts, comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_)
}

// LiquidateBorrow is a paid mutator transaction binding the contract method 0xaae40a2a.
//
// Solidity: function liquidateBorrow(address borrower, address vTokenCollateral) payable returns()
func (_Vbnb *VbnbTransactor) LiquidateBorrow(opts *bind.TransactOpts, borrower common.Address, vTokenCollateral common.Address) (*types.Transaction, error) {
	return _Vbnb.contract.Transact(opts, "liquidateBorrow", borrower, vTokenCollateral)
}

// LiquidateBorrow is a paid mutator transaction binding the contract method 0xaae40a2a.
//
// Solidity: function liquidateBorrow(address borrower, address vTokenCollateral) payable returns()
func (_Vbnb *VbnbSession) LiquidateBorrow(borrower common.Address, vTokenCollateral common.Address) (*types.Transaction, error) {
	return _Vbnb.Contract.LiquidateBorrow(&_Vbnb.TransactOpts, borrower, vTokenCollateral)
}

// LiquidateBorrow is a paid mutator transaction binding the contract method 0xaae40a2a.
//
// Solidity: function liquidateBorrow(address borrower, address vTokenCollateral) payable returns()
func (_Vbnb *VbnbTransactorSession) LiquidateBorrow(borrower common.Address, vTokenCollateral common.Address) (*types.Transaction, error) {
	return _Vbnb.Contract.LiquidateBorrow(&_Vbnb.TransactOpts, borrower, vTokenCollateral)
}

// Mint is a paid mutator transaction binding the contract method 0x1249c58b.
//
// Solidity: function mint() payable returns()
func (_Vbnb *VbnbTransactor) Mint(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vbnb.contract.Transact(opts, "mint")
}

// Mint is a paid mutator transaction binding the contract method 0x1249c58b.
//
// Solidity: function mint() payable returns()
func (_Vbnb *VbnbSession) Mint() (*types.Transaction, error) {
	return _Vbnb.Contract.Mint(&_Vbnb.TransactOpts)
}

// Mint is a paid mutator transaction binding the contract method 0x1249c58b.
//
// Solidity: function mint() payable returns()
func (_Vbnb *VbnbTransactorSession) Mint() (*types.Transaction, error) {
	return _Vbnb.Contract.Mint(&_Vbnb.TransactOpts)
}

// Redeem is a paid mutator transaction binding the contract method 0xdb006a75.
//
// Solidity: function redeem(uint256 redeemTokens) returns(uint256)
func (_Vbnb *VbnbTransactor) Redeem(opts *bind.TransactOpts, redeemTokens *big.Int) (*types.Transaction, error) {
	return _Vbnb.contract.Transact(opts, "redeem", redeemTokens)
}

// Redeem is a paid mutator transaction binding the contract method 0xdb006a75.
//
// Solidity: function redeem(uint256 redeemTokens) returns(uint256)
func (_Vbnb *VbnbSession) Redeem(redeemTokens *big.Int) (*types.Transaction, error) {
	return _Vbnb.Contract.Redeem(&_Vbnb.TransactOpts, redeemTokens)
}

// Redeem is a paid mutator transaction binding the contract method 0xdb006a75.
//
// Solidity: function redeem(uint256 redeemTokens) returns(uint256)
func (_Vbnb *VbnbTransactorSession) Redeem(redeemTokens *big.Int) (*types.Transaction, error) {
	return _Vbnb.Contract.Redeem(&_Vbnb.TransactOpts, redeemTokens)
}

// RedeemUnderlying is a paid mutator transaction binding the contract method 0x852a12e3.
//
// Solidity: function redeemUnderlying(uint256 redeemAmount) returns(uint256)
func (_Vbnb *VbnbTransactor) RedeemUnderlying(opts *bind.TransactOpts, redeemAmount *big.Int) (*types.Transaction, error) {
	return _Vbnb.contract.Transact(opts, "redeemUnderlying", redeemAmount)
}

// RedeemUnderlying is a paid mutator transaction binding the contract method 0x852a12e3.
//
// Solidity: function redeemUnderlying(uint256 redeemAmount) returns(uint256)
func (_Vbnb *VbnbSession) RedeemUnderlying(redeemAmount *big.Int) (*types.Transaction, error) {
	return _Vbnb.Contract.RedeemUnderlying(&_Vbnb.TransactOpts, redeemAmount)
}

// RedeemUnderlying is a paid mutator transaction binding the contract method 0x852a12e3.
//
// Solidity: function redeemUnderlying(uint256 redeemAmount) returns(uint256)
func (_Vbnb *VbnbTransactorSession) RedeemUnderlying(redeemAmount *big.Int) (*types.Transaction, error) {
	return _Vbnb.Contract.RedeemUnderlying(&_Vbnb.TransactOpts, redeemAmount)
}

// RepayBorrow is a paid mutator transaction binding the contract method 0x4e4d9fea.
//
// Solidity: function repayBorrow() payable returns()
func (_Vbnb *VbnbTransactor) RepayBorrow(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vbnb.contract.Transact(opts, "repayBorrow")
}

// RepayBorrow is a paid mutator transaction binding the contract method 0x4e4d9fea.
//
// Solidity: function repayBorrow() payable returns()
func (_Vbnb *VbnbSession) RepayBorrow() (*types.Transaction, error) {
	return _Vbnb.Contract.RepayBorrow(&_Vbnb.TransactOpts)
}

// RepayBorrow is a paid mutator transaction binding the contract method 0x4e4d9fea.
//
// Solidity: function repayBorrow() payable returns()
func (_Vbnb *VbnbTransactorSession) RepayBorrow() (*types.Transaction, error) {
	return _Vbnb.Contract.RepayBorrow(&_Vbnb.TransactOpts)
}

// RepayBorrowBehalf is a paid mutator transaction binding the contract method 0xe5974619.
//
// Solidity: function repayBorrowBehalf(address borrower) payable returns()
func (_Vbnb *VbnbTransactor) RepayBorrowBehalf(opts *bind.TransactOpts, borrower common.Address) (*types.Transaction, error) {
	return _Vbnb.contract.Transact(opts, "repayBorrowBehalf", borrower)
}

// RepayBorrowBehalf is a paid mutator transaction binding the contract method 0xe5974619.
//
// Solidity: function repayBorrowBehalf(address borrower) payable returns()
func (_Vbnb *VbnbSession) RepayBorrowBehalf(borrower common.Address) (*types.Transaction, error) {
	return _Vbnb.Contract.RepayBorrowBehalf(&_Vbnb.TransactOpts, borrower)
}

// RepayBorrowBehalf is a paid mutator transaction binding the contract method 0xe5974619.
//
// Solidity: function repayBorrowBehalf(address borrower) payable returns()
func (_Vbnb *VbnbTransactorSession) RepayBorrowBehalf(borrower common.Address) (*types.Transaction, error) {
	return _Vbnb.Contract.RepayBorrowBehalf(&_Vbnb.TransactOpts, borrower)
}

// Seize is a paid mutator transaction binding the contract method 0xb2a02ff1.
//
// Solidity: function seize(address liquidator, address borrower, uint256 seizeTokens) returns(uint256)
func (_Vbnb *VbnbTransactor) Seize(opts *bind.TransactOpts, liquidator common.Address, borrower common.Address, seizeTokens *big.Int) (*types.Transaction, error) {
	return _Vbnb.contract.Transact(opts, "seize", liquidator, borrower, seizeTokens)
}

// Seize is a paid mutator transaction binding the contract method 0xb2a02ff1.
//
// Solidity: function seize(address liquidator, address borrower, uint256 seizeTokens) returns(uint256)
func (_Vbnb *VbnbSession) Seize(liquidator common.Address, borrower common.Address, seizeTokens *big.Int) (*types.Transaction, error) {
	return _Vbnb.Contract.Seize(&_Vbnb.TransactOpts, liquidator, borrower, seizeTokens)
}

// Seize is a paid mutator transaction binding the contract method 0xb2a02ff1.
//
// Solidity: function seize(address liquidator, address borrower, uint256 seizeTokens) returns(uint256)
func (_Vbnb *VbnbTransactorSession) Seize(liquidator common.Address, borrower common.Address, seizeTokens *big.Int) (*types.Transaction, error) {
	return _Vbnb.Contract.Seize(&_Vbnb.TransactOpts, liquidator, borrower, seizeTokens)
}

// TotalBorrowsCurrent is a paid mutator transaction binding the contract method 0x73acee98.
//
// Solidity: function totalBorrowsCurrent() returns(uint256)
func (_Vbnb *VbnbTransactor) TotalBorrowsCurrent(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vbnb.contract.Transact(opts, "totalBorrowsCurrent")
}

// TotalBorrowsCurrent is a paid mutator transaction binding the contract method 0x73acee98.
//
// Solidity: function totalBorrowsCurrent() returns(uint256)
func (_Vbnb *VbnbSession) TotalBorrowsCurrent() (*types.Transaction, error) {
	return _Vbnb.Contract.TotalBorrowsCurrent(&_Vbnb.TransactOpts)
}

// TotalBorrowsCurrent is a paid mutator transaction binding the contract method 0x73acee98.
//
// Solidity: function totalBorrowsCurrent() returns(uint256)
func (_Vbnb *VbnbTransactorSession) TotalBorrowsCurrent() (*types.Transaction, error) {
	return _Vbnb.Contract.TotalBorrowsCurrent(&_Vbnb.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 amount) returns(bool)
func (_Vbnb *VbnbTransactor) Transfer(opts *bind.TransactOpts, dst common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vbnb.contract.Transact(opts, "transfer", dst, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 amount) returns(bool)
func (_Vbnb *VbnbSession) Transfer(dst common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vbnb.Contract.Transfer(&_Vbnb.TransactOpts, dst, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 amount) returns(bool)
func (_Vbnb *VbnbTransactorSession) Transfer(dst common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vbnb.Contract.Transfer(&_Vbnb.TransactOpts, dst, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 amount) returns(bool)
func (_Vbnb *VbnbTransactor) TransferFrom(opts *bind.TransactOpts, src common.Address, dst common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vbnb.contract.Transact(opts, "transferFrom", src, dst, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 amount) returns(bool)
func (_Vbnb *VbnbSession) TransferFrom(src common.Address, dst common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vbnb.Contract.TransferFrom(&_Vbnb.TransactOpts, src, dst, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 amount) returns(bool)
func (_Vbnb *VbnbTransactorSession) TransferFrom(src common.Address, dst common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vbnb.Contract.TransferFrom(&_Vbnb.TransactOpts, src, dst, amount)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Vbnb *VbnbTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Vbnb.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Vbnb *VbnbSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Vbnb.Contract.Fallback(&_Vbnb.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Vbnb *VbnbTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Vbnb.Contract.Fallback(&_Vbnb.TransactOpts, calldata)
}

// VbnbAccrueInterestIterator is returned from FilterAccrueInterest and is used to iterate over the raw logs and unpacked data for AccrueInterest events raised by the Vbnb contract.
type VbnbAccrueInterestIterator struct {
	Event *VbnbAccrueInterest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VbnbAccrueInterestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VbnbAccrueInterest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VbnbAccrueInterest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VbnbAccrueInterestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VbnbAccrueInterestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VbnbAccrueInterest represents a AccrueInterest event raised by the Vbnb contract.
type VbnbAccrueInterest struct {
	CashPrior           *big.Int
	InterestAccumulated *big.Int
	BorrowIndex         *big.Int
	TotalBorrows        *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterAccrueInterest is a free log retrieval operation binding the contract event 0x4dec04e750ca11537cabcd8a9eab06494de08da3735bc8871cd41250e190bc04.
//
// Solidity: event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows)
func (_Vbnb *VbnbFilterer) FilterAccrueInterest(opts *bind.FilterOpts) (*VbnbAccrueInterestIterator, error) {

	logs, sub, err := _Vbnb.contract.FilterLogs(opts, "AccrueInterest")
	if err != nil {
		return nil, err
	}
	return &VbnbAccrueInterestIterator{contract: _Vbnb.contract, event: "AccrueInterest", logs: logs, sub: sub}, nil
}

// WatchAccrueInterest is a free log subscription operation binding the contract event 0x4dec04e750ca11537cabcd8a9eab06494de08da3735bc8871cd41250e190bc04.
//
// Solidity: event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows)
func (_Vbnb *VbnbFilterer) WatchAccrueInterest(opts *bind.WatchOpts, sink chan<- *VbnbAccrueInterest) (event.Subscription, error) {

	logs, sub, err := _Vbnb.contract.WatchLogs(opts, "AccrueInterest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VbnbAccrueInterest)
				if err := _Vbnb.contract.UnpackLog(event, "AccrueInterest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccrueInterest is a log parse operation binding the contract event 0x4dec04e750ca11537cabcd8a9eab06494de08da3735bc8871cd41250e190bc04.
//
// Solidity: event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows)
func (_Vbnb *VbnbFilterer) ParseAccrueInterest(log types.Log) (*VbnbAccrueInterest, error) {
	event := new(VbnbAccrueInterest)
	if err := _Vbnb.contract.UnpackLog(event, "AccrueInterest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VbnbApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Vbnb contract.
type VbnbApprovalIterator struct {
	Event *VbnbApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VbnbApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VbnbApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VbnbApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VbnbApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VbnbApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VbnbApproval represents a Approval event raised by the Vbnb contract.
type VbnbApproval struct {
	Owner   common.Address
	Spender common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 amount)
func (_Vbnb *VbnbFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*VbnbApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Vbnb.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &VbnbApprovalIterator{contract: _Vbnb.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 amount)
func (_Vbnb *VbnbFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *VbnbApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Vbnb.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VbnbApproval)
				if err := _Vbnb.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 amount)
func (_Vbnb *VbnbFilterer) ParseApproval(log types.Log) (*VbnbApproval, error) {
	event := new(VbnbApproval)
	if err := _Vbnb.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VbnbBorrowIterator is returned from FilterBorrow and is used to iterate over the raw logs and unpacked data for Borrow events raised by the Vbnb contract.
type VbnbBorrowIterator struct {
	Event *VbnbBorrow // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VbnbBorrowIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VbnbBorrow)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VbnbBorrow)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VbnbBorrowIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VbnbBorrowIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VbnbBorrow represents a Borrow event raised by the Vbnb contract.
type VbnbBorrow struct {
	Borrower       common.Address
	BorrowAmount   *big.Int
	AccountBorrows *big.Int
	TotalBorrows   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterBorrow is a free log retrieval operation binding the contract event 0x13ed6866d4e1ee6da46f845c46d7e54120883d75c5ea9a2dacc1c4ca8984ab80.
//
// Solidity: event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows)
func (_Vbnb *VbnbFilterer) FilterBorrow(opts *bind.FilterOpts) (*VbnbBorrowIterator, error) {

	logs, sub, err := _Vbnb.contract.FilterLogs(opts, "Borrow")
	if err != nil {
		return nil, err
	}
	return &VbnbBorrowIterator{contract: _Vbnb.contract, event: "Borrow", logs: logs, sub: sub}, nil
}

// WatchBorrow is a free log subscription operation binding the contract event 0x13ed6866d4e1ee6da46f845c46d7e54120883d75c5ea9a2dacc1c4ca8984ab80.
//
// Solidity: event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows)
func (_Vbnb *VbnbFilterer) WatchBorrow(opts *bind.WatchOpts, sink chan<- *VbnbBorrow) (event.Subscription, error) {

	logs, sub, err := _Vbnb.contract.WatchLogs(opts, "Borrow")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VbnbBorrow)
				if err := _Vbnb.contract.UnpackLog(event, "Borrow", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBorrow is a log parse operation binding the contract event 0x13ed6866d4e1ee6da46f845c46d7e54120883d75c5ea9a2dacc1c4ca8984ab80.
//
// Solidity: event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows)
func (_Vbnb *VbnbFilterer) ParseBorrow(log types.Log) (*VbnbBorrow, error) {
	event := new(VbnbBorrow)
	if err := _Vbnb.contract.UnpackLog(event, "Borrow", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VbnbFailureIterator is returned from FilterFailure and is used to iterate over the raw logs and unpacked data for Failure events raised by the Vbnb contract.
type VbnbFailureIterator struct {
	Event *VbnbFailure // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VbnbFailureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VbnbFailure)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VbnbFailure)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VbnbFailureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VbnbFailureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VbnbFailure represents a Failure event raised by the Vbnb contract.
type VbnbFailure struct {
	Error  *big.Int
	Info   *big.Int
	Detail *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFailure is a free log retrieval operation binding the contract event 0x45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0.
//
// Solidity: event Failure(uint256 error, uint256 info, uint256 detail)
func (_Vbnb *VbnbFilterer) FilterFailure(opts *bind.FilterOpts) (*VbnbFailureIterator, error) {

	logs, sub, err := _Vbnb.contract.FilterLogs(opts, "Failure")
	if err != nil {
		return nil, err
	}
	return &VbnbFailureIterator{contract: _Vbnb.contract, event: "Failure", logs: logs, sub: sub}, nil
}

// WatchFailure is a free log subscription operation binding the contract event 0x45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0.
//
// Solidity: event Failure(uint256 error, uint256 info, uint256 detail)
func (_Vbnb *VbnbFilterer) WatchFailure(opts *bind.WatchOpts, sink chan<- *VbnbFailure) (event.Subscription, error) {

	logs, sub, err := _Vbnb.contract.WatchLogs(opts, "Failure")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VbnbFailure)
				if err := _Vbnb.contract.UnpackLog(event, "Failure", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFailure is a log parse operation binding the contract event 0x45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0.
//
// Solidity: event Failure(uint256 error, uint256 info, uint256 detail)
func (_Vbnb *VbnbFilterer) ParseFailure(log types.Log) (*VbnbFailure, error) {
	event := new(VbnbFailure)
	if err := _Vbnb.contract.UnpackLog(event, "Failure", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VbnbLiquidateBorrowIterator is returned from FilterLiquidateBorrow and is used to iterate over the raw logs and unpacked data for LiquidateBorrow events raised by the Vbnb contract.
type VbnbLiquidateBorrowIterator struct {
	Event *VbnbLiquidateBorrow // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VbnbLiquidateBorrowIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VbnbLiquidateBorrow)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VbnbLiquidateBorrow)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VbnbLiquidateBorrowIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VbnbLiquidateBorrowIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VbnbLiquidateBorrow represents a LiquidateBorrow event raised by the Vbnb contract.
type VbnbLiquidateBorrow struct {
	Liquidator       common.Address
	Borrower         common.Address
	RepayAmount      *big.Int
	VTokenCollateral common.Address
	SeizeTokens      *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterLiquidateBorrow is a free log retrieval operation binding the contract event 0x298637f684da70674f26509b10f07ec2fbc77a335ab1e7d6215a4b2484d8bb52.
//
// Solidity: event LiquidateBorrow(address liquidator, address borrower, uint256 repayAmount, address vTokenCollateral, uint256 seizeTokens)
func (_Vbnb *VbnbFilterer) FilterLiquidateBorrow(opts *bind.FilterOpts) (*VbnbLiquidateBorrowIterator, error) {

	logs, sub, err := _Vbnb.contract.FilterLogs(opts, "LiquidateBorrow")
	if err != nil {
		return nil, err
	}
	return &VbnbLiquidateBorrowIterator{contract: _Vbnb.contract, event: "LiquidateBorrow", logs: logs, sub: sub}, nil
}

// WatchLiquidateBorrow is a free log subscription operation binding the contract event 0x298637f684da70674f26509b10f07ec2fbc77a335ab1e7d6215a4b2484d8bb52.
//
// Solidity: event LiquidateBorrow(address liquidator, address borrower, uint256 repayAmount, address vTokenCollateral, uint256 seizeTokens)
func (_Vbnb *VbnbFilterer) WatchLiquidateBorrow(opts *bind.WatchOpts, sink chan<- *VbnbLiquidateBorrow) (event.Subscription, error) {

	logs, sub, err := _Vbnb.contract.WatchLogs(opts, "LiquidateBorrow")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VbnbLiquidateBorrow)
				if err := _Vbnb.contract.UnpackLog(event, "LiquidateBorrow", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLiquidateBorrow is a log parse operation binding the contract event 0x298637f684da70674f26509b10f07ec2fbc77a335ab1e7d6215a4b2484d8bb52.
//
// Solidity: event LiquidateBorrow(address liquidator, address borrower, uint256 repayAmount, address vTokenCollateral, uint256 seizeTokens)
func (_Vbnb *VbnbFilterer) ParseLiquidateBorrow(log types.Log) (*VbnbLiquidateBorrow, error) {
	event := new(VbnbLiquidateBorrow)
	if err := _Vbnb.contract.UnpackLog(event, "LiquidateBorrow", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VbnbMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the Vbnb contract.
type VbnbMintIterator struct {
	Event *VbnbMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VbnbMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VbnbMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VbnbMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VbnbMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VbnbMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VbnbMint represents a Mint event raised by the Vbnb contract.
type VbnbMint struct {
	Minter     common.Address
	MintAmount *big.Int
	MintTokens *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f.
//
// Solidity: event Mint(address minter, uint256 mintAmount, uint256 mintTokens)
func (_Vbnb *VbnbFilterer) FilterMint(opts *bind.FilterOpts) (*VbnbMintIterator, error) {

	logs, sub, err := _Vbnb.contract.FilterLogs(opts, "Mint")
	if err != nil {
		return nil, err
	}
	return &VbnbMintIterator{contract: _Vbnb.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f.
//
// Solidity: event Mint(address minter, uint256 mintAmount, uint256 mintTokens)
func (_Vbnb *VbnbFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *VbnbMint) (event.Subscription, error) {

	logs, sub, err := _Vbnb.contract.WatchLogs(opts, "Mint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VbnbMint)
				if err := _Vbnb.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f.
//
// Solidity: event Mint(address minter, uint256 mintAmount, uint256 mintTokens)
func (_Vbnb *VbnbFilterer) ParseMint(log types.Log) (*VbnbMint, error) {
	event := new(VbnbMint)
	if err := _Vbnb.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VbnbNewAdminIterator is returned from FilterNewAdmin and is used to iterate over the raw logs and unpacked data for NewAdmin events raised by the Vbnb contract.
type VbnbNewAdminIterator struct {
	Event *VbnbNewAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VbnbNewAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VbnbNewAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VbnbNewAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VbnbNewAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VbnbNewAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VbnbNewAdmin represents a NewAdmin event raised by the Vbnb contract.
type VbnbNewAdmin struct {
	OldAdmin common.Address
	NewAdmin common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNewAdmin is a free log retrieval operation binding the contract event 0xf9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc.
//
// Solidity: event NewAdmin(address oldAdmin, address newAdmin)
func (_Vbnb *VbnbFilterer) FilterNewAdmin(opts *bind.FilterOpts) (*VbnbNewAdminIterator, error) {

	logs, sub, err := _Vbnb.contract.FilterLogs(opts, "NewAdmin")
	if err != nil {
		return nil, err
	}
	return &VbnbNewAdminIterator{contract: _Vbnb.contract, event: "NewAdmin", logs: logs, sub: sub}, nil
}

// WatchNewAdmin is a free log subscription operation binding the contract event 0xf9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc.
//
// Solidity: event NewAdmin(address oldAdmin, address newAdmin)
func (_Vbnb *VbnbFilterer) WatchNewAdmin(opts *bind.WatchOpts, sink chan<- *VbnbNewAdmin) (event.Subscription, error) {

	logs, sub, err := _Vbnb.contract.WatchLogs(opts, "NewAdmin")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VbnbNewAdmin)
				if err := _Vbnb.contract.UnpackLog(event, "NewAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewAdmin is a log parse operation binding the contract event 0xf9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc.
//
// Solidity: event NewAdmin(address oldAdmin, address newAdmin)
func (_Vbnb *VbnbFilterer) ParseNewAdmin(log types.Log) (*VbnbNewAdmin, error) {
	event := new(VbnbNewAdmin)
	if err := _Vbnb.contract.UnpackLog(event, "NewAdmin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VbnbNewComptrollerIterator is returned from FilterNewComptroller and is used to iterate over the raw logs and unpacked data for NewComptroller events raised by the Vbnb contract.
type VbnbNewComptrollerIterator struct {
	Event *VbnbNewComptroller // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VbnbNewComptrollerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VbnbNewComptroller)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VbnbNewComptroller)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VbnbNewComptrollerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VbnbNewComptrollerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VbnbNewComptroller represents a NewComptroller event raised by the Vbnb contract.
type VbnbNewComptroller struct {
	OldComptroller common.Address
	NewComptroller common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterNewComptroller is a free log retrieval operation binding the contract event 0x7ac369dbd14fa5ea3f473ed67cc9d598964a77501540ba6751eb0b3decf5870d.
//
// Solidity: event NewComptroller(address oldComptroller, address newComptroller)
func (_Vbnb *VbnbFilterer) FilterNewComptroller(opts *bind.FilterOpts) (*VbnbNewComptrollerIterator, error) {

	logs, sub, err := _Vbnb.contract.FilterLogs(opts, "NewComptroller")
	if err != nil {
		return nil, err
	}
	return &VbnbNewComptrollerIterator{contract: _Vbnb.contract, event: "NewComptroller", logs: logs, sub: sub}, nil
}

// WatchNewComptroller is a free log subscription operation binding the contract event 0x7ac369dbd14fa5ea3f473ed67cc9d598964a77501540ba6751eb0b3decf5870d.
//
// Solidity: event NewComptroller(address oldComptroller, address newComptroller)
func (_Vbnb *VbnbFilterer) WatchNewComptroller(opts *bind.WatchOpts, sink chan<- *VbnbNewComptroller) (event.Subscription, error) {

	logs, sub, err := _Vbnb.contract.WatchLogs(opts, "NewComptroller")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VbnbNewComptroller)
				if err := _Vbnb.contract.UnpackLog(event, "NewComptroller", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewComptroller is a log parse operation binding the contract event 0x7ac369dbd14fa5ea3f473ed67cc9d598964a77501540ba6751eb0b3decf5870d.
//
// Solidity: event NewComptroller(address oldComptroller, address newComptroller)
func (_Vbnb *VbnbFilterer) ParseNewComptroller(log types.Log) (*VbnbNewComptroller, error) {
	event := new(VbnbNewComptroller)
	if err := _Vbnb.contract.UnpackLog(event, "NewComptroller", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VbnbNewMarketInterestRateModelIterator is returned from FilterNewMarketInterestRateModel and is used to iterate over the raw logs and unpacked data for NewMarketInterestRateModel events raised by the Vbnb contract.
type VbnbNewMarketInterestRateModelIterator struct {
	Event *VbnbNewMarketInterestRateModel // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VbnbNewMarketInterestRateModelIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VbnbNewMarketInterestRateModel)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VbnbNewMarketInterestRateModel)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VbnbNewMarketInterestRateModelIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VbnbNewMarketInterestRateModelIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VbnbNewMarketInterestRateModel represents a NewMarketInterestRateModel event raised by the Vbnb contract.
type VbnbNewMarketInterestRateModel struct {
	OldInterestRateModel common.Address
	NewInterestRateModel common.Address
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterNewMarketInterestRateModel is a free log retrieval operation binding the contract event 0xedffc32e068c7c95dfd4bdfd5c4d939a084d6b11c4199eac8436ed234d72f926.
//
// Solidity: event NewMarketInterestRateModel(address oldInterestRateModel, address newInterestRateModel)
func (_Vbnb *VbnbFilterer) FilterNewMarketInterestRateModel(opts *bind.FilterOpts) (*VbnbNewMarketInterestRateModelIterator, error) {

	logs, sub, err := _Vbnb.contract.FilterLogs(opts, "NewMarketInterestRateModel")
	if err != nil {
		return nil, err
	}
	return &VbnbNewMarketInterestRateModelIterator{contract: _Vbnb.contract, event: "NewMarketInterestRateModel", logs: logs, sub: sub}, nil
}

// WatchNewMarketInterestRateModel is a free log subscription operation binding the contract event 0xedffc32e068c7c95dfd4bdfd5c4d939a084d6b11c4199eac8436ed234d72f926.
//
// Solidity: event NewMarketInterestRateModel(address oldInterestRateModel, address newInterestRateModel)
func (_Vbnb *VbnbFilterer) WatchNewMarketInterestRateModel(opts *bind.WatchOpts, sink chan<- *VbnbNewMarketInterestRateModel) (event.Subscription, error) {

	logs, sub, err := _Vbnb.contract.WatchLogs(opts, "NewMarketInterestRateModel")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VbnbNewMarketInterestRateModel)
				if err := _Vbnb.contract.UnpackLog(event, "NewMarketInterestRateModel", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewMarketInterestRateModel is a log parse operation binding the contract event 0xedffc32e068c7c95dfd4bdfd5c4d939a084d6b11c4199eac8436ed234d72f926.
//
// Solidity: event NewMarketInterestRateModel(address oldInterestRateModel, address newInterestRateModel)
func (_Vbnb *VbnbFilterer) ParseNewMarketInterestRateModel(log types.Log) (*VbnbNewMarketInterestRateModel, error) {
	event := new(VbnbNewMarketInterestRateModel)
	if err := _Vbnb.contract.UnpackLog(event, "NewMarketInterestRateModel", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VbnbNewPendingAdminIterator is returned from FilterNewPendingAdmin and is used to iterate over the raw logs and unpacked data for NewPendingAdmin events raised by the Vbnb contract.
type VbnbNewPendingAdminIterator struct {
	Event *VbnbNewPendingAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VbnbNewPendingAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VbnbNewPendingAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VbnbNewPendingAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VbnbNewPendingAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VbnbNewPendingAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VbnbNewPendingAdmin represents a NewPendingAdmin event raised by the Vbnb contract.
type VbnbNewPendingAdmin struct {
	OldPendingAdmin common.Address
	NewPendingAdmin common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNewPendingAdmin is a free log retrieval operation binding the contract event 0xca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9.
//
// Solidity: event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin)
func (_Vbnb *VbnbFilterer) FilterNewPendingAdmin(opts *bind.FilterOpts) (*VbnbNewPendingAdminIterator, error) {

	logs, sub, err := _Vbnb.contract.FilterLogs(opts, "NewPendingAdmin")
	if err != nil {
		return nil, err
	}
	return &VbnbNewPendingAdminIterator{contract: _Vbnb.contract, event: "NewPendingAdmin", logs: logs, sub: sub}, nil
}

// WatchNewPendingAdmin is a free log subscription operation binding the contract event 0xca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9.
//
// Solidity: event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin)
func (_Vbnb *VbnbFilterer) WatchNewPendingAdmin(opts *bind.WatchOpts, sink chan<- *VbnbNewPendingAdmin) (event.Subscription, error) {

	logs, sub, err := _Vbnb.contract.WatchLogs(opts, "NewPendingAdmin")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VbnbNewPendingAdmin)
				if err := _Vbnb.contract.UnpackLog(event, "NewPendingAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewPendingAdmin is a log parse operation binding the contract event 0xca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9.
//
// Solidity: event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin)
func (_Vbnb *VbnbFilterer) ParseNewPendingAdmin(log types.Log) (*VbnbNewPendingAdmin, error) {
	event := new(VbnbNewPendingAdmin)
	if err := _Vbnb.contract.UnpackLog(event, "NewPendingAdmin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VbnbNewReserveFactorIterator is returned from FilterNewReserveFactor and is used to iterate over the raw logs and unpacked data for NewReserveFactor events raised by the Vbnb contract.
type VbnbNewReserveFactorIterator struct {
	Event *VbnbNewReserveFactor // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VbnbNewReserveFactorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VbnbNewReserveFactor)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VbnbNewReserveFactor)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VbnbNewReserveFactorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VbnbNewReserveFactorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VbnbNewReserveFactor represents a NewReserveFactor event raised by the Vbnb contract.
type VbnbNewReserveFactor struct {
	OldReserveFactorMantissa *big.Int
	NewReserveFactorMantissa *big.Int
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterNewReserveFactor is a free log retrieval operation binding the contract event 0xaaa68312e2ea9d50e16af5068410ab56e1a1fd06037b1a35664812c30f821460.
//
// Solidity: event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa)
func (_Vbnb *VbnbFilterer) FilterNewReserveFactor(opts *bind.FilterOpts) (*VbnbNewReserveFactorIterator, error) {

	logs, sub, err := _Vbnb.contract.FilterLogs(opts, "NewReserveFactor")
	if err != nil {
		return nil, err
	}
	return &VbnbNewReserveFactorIterator{contract: _Vbnb.contract, event: "NewReserveFactor", logs: logs, sub: sub}, nil
}

// WatchNewReserveFactor is a free log subscription operation binding the contract event 0xaaa68312e2ea9d50e16af5068410ab56e1a1fd06037b1a35664812c30f821460.
//
// Solidity: event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa)
func (_Vbnb *VbnbFilterer) WatchNewReserveFactor(opts *bind.WatchOpts, sink chan<- *VbnbNewReserveFactor) (event.Subscription, error) {

	logs, sub, err := _Vbnb.contract.WatchLogs(opts, "NewReserveFactor")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VbnbNewReserveFactor)
				if err := _Vbnb.contract.UnpackLog(event, "NewReserveFactor", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewReserveFactor is a log parse operation binding the contract event 0xaaa68312e2ea9d50e16af5068410ab56e1a1fd06037b1a35664812c30f821460.
//
// Solidity: event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa)
func (_Vbnb *VbnbFilterer) ParseNewReserveFactor(log types.Log) (*VbnbNewReserveFactor, error) {
	event := new(VbnbNewReserveFactor)
	if err := _Vbnb.contract.UnpackLog(event, "NewReserveFactor", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VbnbRedeemIterator is returned from FilterRedeem and is used to iterate over the raw logs and unpacked data for Redeem events raised by the Vbnb contract.
type VbnbRedeemIterator struct {
	Event *VbnbRedeem // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VbnbRedeemIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VbnbRedeem)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VbnbRedeem)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VbnbRedeemIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VbnbRedeemIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VbnbRedeem represents a Redeem event raised by the Vbnb contract.
type VbnbRedeem struct {
	Redeemer     common.Address
	RedeemAmount *big.Int
	RedeemTokens *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRedeem is a free log retrieval operation binding the contract event 0xe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a929.
//
// Solidity: event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens)
func (_Vbnb *VbnbFilterer) FilterRedeem(opts *bind.FilterOpts) (*VbnbRedeemIterator, error) {

	logs, sub, err := _Vbnb.contract.FilterLogs(opts, "Redeem")
	if err != nil {
		return nil, err
	}
	return &VbnbRedeemIterator{contract: _Vbnb.contract, event: "Redeem", logs: logs, sub: sub}, nil
}

// WatchRedeem is a free log subscription operation binding the contract event 0xe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a929.
//
// Solidity: event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens)
func (_Vbnb *VbnbFilterer) WatchRedeem(opts *bind.WatchOpts, sink chan<- *VbnbRedeem) (event.Subscription, error) {

	logs, sub, err := _Vbnb.contract.WatchLogs(opts, "Redeem")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VbnbRedeem)
				if err := _Vbnb.contract.UnpackLog(event, "Redeem", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeem is a log parse operation binding the contract event 0xe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a929.
//
// Solidity: event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens)
func (_Vbnb *VbnbFilterer) ParseRedeem(log types.Log) (*VbnbRedeem, error) {
	event := new(VbnbRedeem)
	if err := _Vbnb.contract.UnpackLog(event, "Redeem", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VbnbRepayBorrowIterator is returned from FilterRepayBorrow and is used to iterate over the raw logs and unpacked data for RepayBorrow events raised by the Vbnb contract.
type VbnbRepayBorrowIterator struct {
	Event *VbnbRepayBorrow // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VbnbRepayBorrowIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VbnbRepayBorrow)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VbnbRepayBorrow)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VbnbRepayBorrowIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VbnbRepayBorrowIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VbnbRepayBorrow represents a RepayBorrow event raised by the Vbnb contract.
type VbnbRepayBorrow struct {
	Payer          common.Address
	Borrower       common.Address
	RepayAmount    *big.Int
	AccountBorrows *big.Int
	TotalBorrows   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRepayBorrow is a free log retrieval operation binding the contract event 0x1a2a22cb034d26d1854bdc6666a5b91fe25efbbb5dcad3b0355478d6f5c362a1.
//
// Solidity: event RepayBorrow(address payer, address borrower, uint256 repayAmount, uint256 accountBorrows, uint256 totalBorrows)
func (_Vbnb *VbnbFilterer) FilterRepayBorrow(opts *bind.FilterOpts) (*VbnbRepayBorrowIterator, error) {

	logs, sub, err := _Vbnb.contract.FilterLogs(opts, "RepayBorrow")
	if err != nil {
		return nil, err
	}
	return &VbnbRepayBorrowIterator{contract: _Vbnb.contract, event: "RepayBorrow", logs: logs, sub: sub}, nil
}

// WatchRepayBorrow is a free log subscription operation binding the contract event 0x1a2a22cb034d26d1854bdc6666a5b91fe25efbbb5dcad3b0355478d6f5c362a1.
//
// Solidity: event RepayBorrow(address payer, address borrower, uint256 repayAmount, uint256 accountBorrows, uint256 totalBorrows)
func (_Vbnb *VbnbFilterer) WatchRepayBorrow(opts *bind.WatchOpts, sink chan<- *VbnbRepayBorrow) (event.Subscription, error) {

	logs, sub, err := _Vbnb.contract.WatchLogs(opts, "RepayBorrow")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VbnbRepayBorrow)
				if err := _Vbnb.contract.UnpackLog(event, "RepayBorrow", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRepayBorrow is a log parse operation binding the contract event 0x1a2a22cb034d26d1854bdc6666a5b91fe25efbbb5dcad3b0355478d6f5c362a1.
//
// Solidity: event RepayBorrow(address payer, address borrower, uint256 repayAmount, uint256 accountBorrows, uint256 totalBorrows)
func (_Vbnb *VbnbFilterer) ParseRepayBorrow(log types.Log) (*VbnbRepayBorrow, error) {
	event := new(VbnbRepayBorrow)
	if err := _Vbnb.contract.UnpackLog(event, "RepayBorrow", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VbnbReservesAddedIterator is returned from FilterReservesAdded and is used to iterate over the raw logs and unpacked data for ReservesAdded events raised by the Vbnb contract.
type VbnbReservesAddedIterator struct {
	Event *VbnbReservesAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VbnbReservesAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VbnbReservesAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VbnbReservesAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VbnbReservesAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VbnbReservesAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VbnbReservesAdded represents a ReservesAdded event raised by the Vbnb contract.
type VbnbReservesAdded struct {
	Benefactor       common.Address
	AddAmount        *big.Int
	NewTotalReserves *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterReservesAdded is a free log retrieval operation binding the contract event 0xa91e67c5ea634cd43a12c5a482724b03de01e85ca68702a53d0c2f45cb7c1dc5.
//
// Solidity: event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves)
func (_Vbnb *VbnbFilterer) FilterReservesAdded(opts *bind.FilterOpts) (*VbnbReservesAddedIterator, error) {

	logs, sub, err := _Vbnb.contract.FilterLogs(opts, "ReservesAdded")
	if err != nil {
		return nil, err
	}
	return &VbnbReservesAddedIterator{contract: _Vbnb.contract, event: "ReservesAdded", logs: logs, sub: sub}, nil
}

// WatchReservesAdded is a free log subscription operation binding the contract event 0xa91e67c5ea634cd43a12c5a482724b03de01e85ca68702a53d0c2f45cb7c1dc5.
//
// Solidity: event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves)
func (_Vbnb *VbnbFilterer) WatchReservesAdded(opts *bind.WatchOpts, sink chan<- *VbnbReservesAdded) (event.Subscription, error) {

	logs, sub, err := _Vbnb.contract.WatchLogs(opts, "ReservesAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VbnbReservesAdded)
				if err := _Vbnb.contract.UnpackLog(event, "ReservesAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReservesAdded is a log parse operation binding the contract event 0xa91e67c5ea634cd43a12c5a482724b03de01e85ca68702a53d0c2f45cb7c1dc5.
//
// Solidity: event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves)
func (_Vbnb *VbnbFilterer) ParseReservesAdded(log types.Log) (*VbnbReservesAdded, error) {
	event := new(VbnbReservesAdded)
	if err := _Vbnb.contract.UnpackLog(event, "ReservesAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VbnbReservesReducedIterator is returned from FilterReservesReduced and is used to iterate over the raw logs and unpacked data for ReservesReduced events raised by the Vbnb contract.
type VbnbReservesReducedIterator struct {
	Event *VbnbReservesReduced // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VbnbReservesReducedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VbnbReservesReduced)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VbnbReservesReduced)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VbnbReservesReducedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VbnbReservesReducedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VbnbReservesReduced represents a ReservesReduced event raised by the Vbnb contract.
type VbnbReservesReduced struct {
	Admin            common.Address
	ReduceAmount     *big.Int
	NewTotalReserves *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterReservesReduced is a free log retrieval operation binding the contract event 0x3bad0c59cf2f06e7314077049f48a93578cd16f5ef92329f1dab1420a99c177e.
//
// Solidity: event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves)
func (_Vbnb *VbnbFilterer) FilterReservesReduced(opts *bind.FilterOpts) (*VbnbReservesReducedIterator, error) {

	logs, sub, err := _Vbnb.contract.FilterLogs(opts, "ReservesReduced")
	if err != nil {
		return nil, err
	}
	return &VbnbReservesReducedIterator{contract: _Vbnb.contract, event: "ReservesReduced", logs: logs, sub: sub}, nil
}

// WatchReservesReduced is a free log subscription operation binding the contract event 0x3bad0c59cf2f06e7314077049f48a93578cd16f5ef92329f1dab1420a99c177e.
//
// Solidity: event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves)
func (_Vbnb *VbnbFilterer) WatchReservesReduced(opts *bind.WatchOpts, sink chan<- *VbnbReservesReduced) (event.Subscription, error) {

	logs, sub, err := _Vbnb.contract.WatchLogs(opts, "ReservesReduced")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VbnbReservesReduced)
				if err := _Vbnb.contract.UnpackLog(event, "ReservesReduced", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReservesReduced is a log parse operation binding the contract event 0x3bad0c59cf2f06e7314077049f48a93578cd16f5ef92329f1dab1420a99c177e.
//
// Solidity: event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves)
func (_Vbnb *VbnbFilterer) ParseReservesReduced(log types.Log) (*VbnbReservesReduced, error) {
	event := new(VbnbReservesReduced)
	if err := _Vbnb.contract.UnpackLog(event, "ReservesReduced", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VbnbTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Vbnb contract.
type VbnbTransferIterator struct {
	Event *VbnbTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VbnbTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VbnbTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VbnbTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VbnbTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VbnbTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VbnbTransfer represents a Transfer event raised by the Vbnb contract.
type VbnbTransfer struct {
	From   common.Address
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 amount)
func (_Vbnb *VbnbFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*VbnbTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Vbnb.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &VbnbTransferIterator{contract: _Vbnb.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 amount)
func (_Vbnb *VbnbFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *VbnbTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Vbnb.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VbnbTransfer)
				if err := _Vbnb.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 amount)
func (_Vbnb *VbnbFilterer) ParseTransfer(log types.Log) (*VbnbTransfer, error) {
	event := new(VbnbTransfer)
	if err := _Vbnb.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
