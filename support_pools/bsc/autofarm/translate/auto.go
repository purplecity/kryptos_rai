// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package translate

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AutoABI is the input ABI used to generate the binding from.
const AutoABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUTO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTOMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTOPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTOv2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contractIERC20\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_strat\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inputAmt\",\"type\":\"uint256\"}],\"name\":\"migrateToAUTOv2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAUTOReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingAUTO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"want\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accAUTOPerShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strat\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"stakedWantTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// AutoBin is the compiled bytecode used for deploying new contracts.
var AutoBin = "0x6080604052734508abb72232271e452258530d4ed799c685eccb600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073a184088a740c695e156f91f5cc086a06bb78b827600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061dead600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550608a6005556910f0cf064dd592000000600655661c6bf526340000600755623b56f86008556000600b553480156200012857600080fd5b5060006200013b620001e660201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35060018081905550620001ee565b600033905090565b61396080620001fe6000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c8063715018a6116100f9578063aceb711011610097578063e2bbb15811610071578063e2bbb158146106f3578063e7fa1e861461072b578063e8af6aff14610749578063f2fde38b1461077d576101a9565b8063aceb711014610615578063c0660d1d14610643578063c6d758cb146106a5576101a9565b80638dbb1e3a116100d35780638dbb1e3a1461051457806393f1a40b14610560578063958e2d31146105c9578063a96fe443146105f7576101a9565b8063715018a6146104745780637b84daec1461047e5780638da5cb5b146104e0576101a9565b806351eb05a611610166578063630b5ba111610140578063630b5ba1146103be57806364482f79146103c857806369f94adf1461040c57806370d5ae0514610440576101a9565b806351eb05a6146102e85780635312ea8e146103165780635f70edcf14610344576101a9565b8063015ffb41146101ae578063081e3eda146101cc5780631526fe27146101ea57806317caf6f114610274578063441a3e701461029257806348cd4cb1146102ca575b600080fd5b6101b66107c1565b6040518082815260200191505060405180910390f35b6101d46107c7565b6040518082815260200191505060405180910390f35b6102166004803603602081101561020057600080fd5b81019080803590602001909291905050506107d4565b604051808673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060405180910390f35b61027c610857565b6040518082815260200191505060405180910390f35b6102c8600480360360408110156102a857600080fd5b81019080803590602001909291908035906020019092919050505061085d565b005b6102d2610f5d565b6040518082815260200191505060405180910390f35b610314600480360360208110156102fe57600080fd5b8101908080359060200190929190505050610f63565b005b6103426004803603602081101561032c57600080fd5b8101908080359060200190929190505050611298565b005b6103bc6004803603608081101561035a57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116eb565b005b6103c6611928565b005b61040a600480360360608110156103de57600080fd5b810190808035906020019092919080359060200190929190803515159060200190929190505050611955565b005b610414611a9f565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610448611ac5565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61047c611aeb565b005b6104ca6004803603604081101561049457600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c71565b6040518082815260200191505060405180910390f35b6104e8611e9d565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61054a6004803603604081101561052a57600080fd5b810190808035906020019092919080359060200190929190505050611ec6565b6040518082815260200191505060405180910390f35b6105ac6004803603604081101561057657600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f98565b604051808381526020018281526020019250505060405180910390f35b6105f5600480360360208110156105df57600080fd5b8101908080359060200190929190505050611fc9565b005b6105ff61207e565b6040518082815260200191505060405180910390f35b6106416004803603602081101561062b57600080fd5b8101908080359060200190929190505050612084565b005b61068f6004803603604081101561065957600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061228a565b6040518082815260200191505060405180910390f35b6106f1600480360360408110156106bb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506124af565b005b6107296004803603604081101561070957600080fd5b81019080803590602001909291908035906020019092919050505061266a565b005b610733612a48565b6040518082815260200191505060405180910390f35b610751612a4e565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6107bf6004803603602081101561079357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a74565b005b60055481565b6000600980549050905090565b600981815481106107e157fe5b90600052602060002090600502016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905085565b600b5481565b600260015414156108d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b60026001819055506108e782610f63565b6000600983815481106108f657fe5b906000526020600020906005020190506000600a600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060006009858154811061096957fe5b906000526020600020906005020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342da4eb36040518163ffffffff1660e01b815260040160206040518083038186803b1580156109e057600080fd5b505afa1580156109f4573d6000803e3d6000fd5b505050506040513d6020811015610a0a57600080fd5b81019080805190602001909291905050509050600060098681548110610a2c57fe5b906000526020600020906005020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610aa357600080fd5b505afa158015610ab7573d6000803e3d6000fd5b505050506040513d6020811015610acd57600080fd5b810190808051906020019092919050505090506000836000015411610b5a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f757365722e73686172657320697320300000000000000000000000000000000081525060200191505060405180910390fd5b60008111610bd0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f736861726573546f74616c20697320300000000000000000000000000000000081525060200191505060405180910390fd5b6000610c1a8460010154610c0c64e8d4a51000610bfe89600301548960000154612c7f90919063ffffffff16565b612d0590919063ffffffff16565b612d4f90919063ffffffff16565b90506000811115610c3057610c2f3382612d99565b5b6000610c5b83610c4d868860000154612c7f90919063ffffffff16565b612d0590919063ffffffff16565b905080871115610c69578096505b6000871115610ec357600060098981548110610c8157fe5b906000526020600020906005020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3fef3a3338a6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610d2357600080fd5b505af1158015610d37573d6000803e3d6000fd5b505050506040513d6020811015610d4d57600080fd5b810190808051906020019092919050505090508560000154811115610d7b5760008660000181905550610d9b565b610d92818760000154612d4f90919063ffffffff16565b86600001819055505b60008760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610e2857600080fd5b505afa158015610e3c573d6000803e3d6000fd5b505050506040513d6020811015610e5257600080fd5b8101908080519060200190929190505050905088811015610e71578098505b610ec0338a8a60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130129092919063ffffffff16565b50505b610ef564e8d4a51000610ee788600301548860000154612c7f90919063ffffffff16565b612d0590919063ffffffff16565b8560010181905550873373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568896040518082815260200191505060405180910390a3505050505050600180819055505050565b60085481565b600060098281548110610f7257fe5b9060005260206000209060050201905080600201544311610f935750611295565b60008160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fff57600080fd5b505afa158015611013573d6000803e3d6000fd5b505050506040513d602081101561102957600080fd5b810190808051906020019092919050505090506000811415611055574382600201819055505050611295565b6000611065836002015443611ec6565b90506000811161107757505050611295565b60006110b8600b546110aa866001015461109c60075487612c7f90919063ffffffff16565b612c7f90919063ffffffff16565b612d0590919063ffffffff16565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f19611100611e9d565b6111296103e861111b60055487612c7f90919063ffffffff16565b612d0590919063ffffffff16565b6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561117c57600080fd5b505af1158015611190573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561122757600080fd5b505af115801561123b573d6000803e3d6000fd5b5050505061127f61126c8461125e64e8d4a5100085612c7f90919063ffffffff16565b612d0590919063ffffffff16565b85600301546130b490919063ffffffff16565b8460030181905550438460020181905550505050505b50565b60026001541415611311576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b600260018190555060006009828154811061132857fe5b906000526020600020906005020190506000600a600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060006009848154811061139b57fe5b906000526020600020906005020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342da4eb36040518163ffffffff1660e01b815260040160206040518083038186803b15801561141257600080fd5b505afa158015611426573d6000803e3d6000fd5b505050506040513d602081101561143c57600080fd5b8101908080519060200190929190505050905060006009858154811061145e57fe5b906000526020600020906005020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114d557600080fd5b505afa1580156114e9573d6000803e3d6000fd5b505050506040513d60208110156114ff57600080fd5b81019080805190602001909291905050509050600061153d8261152f858760000154612c7f90919063ffffffff16565b612d0590919063ffffffff16565b90506009868154811061154c57fe5b906000526020600020906005020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3fef3a333836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156115ee57600080fd5b505af1158015611602573d6000803e3d6000fd5b505050506040513d602081101561161857600080fd5b81019080805190602001909291905050505061167933828760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130129092919063ffffffff16565b853373ffffffffffffffffffffffffffffffffffffffff167fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae0595836040518082815260200191505060405180910390a3600084600001819055506000846001018190555050505050506001808190555050565b6116f361313c565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146117b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b81156117c2576117c1611928565b5b600060085443116117d5576008546117d7565b435b90506117ee85600b546130b490919063ffffffff16565b600b8190555060096040518060a001604052808673ffffffffffffffffffffffffffffffffffffffff168152602001878152602001838152602001600081526020018473ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505050565b6000600980549050905060005b818110156119515761194681610f63565b806001019050611935565b5050565b61195d61313c565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611a1d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b8015611a2c57611a2b611928565b5b611a7182611a6360098681548110611a4057fe5b906000526020600020906005020160010154600b54612d4f90919063ffffffff16565b6130b490919063ffffffff16565b600b819055508160098481548110611a8557fe5b906000526020600020906005020160010181905550505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611af361313c565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611bb3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060098481548110611c8157fe5b906000526020600020906005020190506000600a600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d5157600080fd5b505afa158015611d65573d6000803e3d6000fd5b505050506040513d6020811015611d7b57600080fd5b81019080805190602001909291905050509050600060098781548110611d9d57fe5b906000526020600020906005020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342da4eb36040518163ffffffff1660e01b815260040160206040518083038186803b158015611e1457600080fd5b505afa158015611e28573d6000803e3d6000fd5b505050506040513d6020811015611e3e57600080fd5b810190808051906020019092919050505090506000821415611e67576000945050505050611e97565b611e9082611e82838660000154612c7f90919063ffffffff16565b612d0590919063ffffffff16565b9450505050505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600654600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f3357600080fd5b505afa158015611f47573d6000803e3d6000fd5b505050506040513d6020811015611f5d57600080fd5b810190808051906020019092919050505010611f7c5760009050611f92565b611f8f8383612d4f90919063ffffffff16565b90505b92915050565b600a602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b60026001541415612042576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b6002600181905550612074817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61085d565b6001808190555050565b60065481565b624ccd7543106120fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f746f6f206c617465203a2800000000000000000000000000000000000000000081525060200191505060405180910390fd5b61216b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166131449092919063ffffffff16565b6121dc33600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166132bd909392919063ffffffff16565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561226f57600080fd5b505af1158015612283573d6000803e3d6000fd5b5050505050565b6000806009848154811061229a57fe5b906000526020600020906005020190506000600a600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008260030154905060008360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561237357600080fd5b505afa158015612387573d6000803e3d6000fd5b505050506040513d602081101561239d57600080fd5b810190808051906020019092919050505090508360020154431180156123c4575060008114155b1561245f5760006123d9856002015443611ec6565b9050600061241c600b5461240e886001015461240060075487612c7f90919063ffffffff16565b612c7f90919063ffffffff16565b612d0590919063ffffffff16565b905061245a61244b8461243d64e8d4a5100085612c7f90919063ffffffff16565b612d0590919063ffffffff16565b856130b490919063ffffffff16565b935050505b6124a3836001015461249564e8d4a51000612487868860000154612c7f90919063ffffffff16565b612d0590919063ffffffff16565b612d4f90919063ffffffff16565b94505050505092915050565b6124b761313c565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612577576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561263b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260058152602001807f217361666500000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b61266633828473ffffffffffffffffffffffffffffffffffffffff166130129092919063ffffffff16565b5050565b600260015414156126e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b60026001819055506126f482610f63565b60006009838154811061270357fe5b906000526020600020906005020190506000600a600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015411156127d65760006127be82600101546127b064e8d4a510006127a287600301548760000154612c7f90919063ffffffff16565b612d0590919063ffffffff16565b612d4f90919063ffffffff16565b905060008111156127d4576127d33382612d99565b5b505b60008311156129b2576128303330858560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166132bd909392919063ffffffff16565b6128a38260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166131449092919063ffffffff16565b6000600985815481106128b257fe5b906000526020600020906005020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166347e7ef2433866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561295457600080fd5b505af1158015612968573d6000803e3d6000fd5b505050506040513d602081101561297e57600080fd5b810190808051906020019092919050505090506129a88183600001546130b490919063ffffffff16565b8260000181905550505b6129e464e8d4a510006129d684600301548460000154612c7f90919063ffffffff16565b612d0590919063ffffffff16565b8160010181905550833373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15856040518082815260200191505060405180910390a35050600180819055505050565b60075481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612a7c61313c565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612b3c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612bc2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806138946026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080831415612c925760009050612cff565b6000828402905082848281612ca357fe5b0414612cfa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806138e06021913960400191505060405180910390fd5b809150505b92915050565b6000612d4783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061337e565b905092915050565b6000612d9183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613444565b905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612e2457600080fd5b505afa158015612e38573d6000803e3d6000fd5b505050506040513d6020811015612e4e57600080fd5b8101908080519060200190929190505050905080821115612f3d57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612efc57600080fd5b505af1158015612f10573d6000803e3d6000fd5b505050506040513d6020811015612f2657600080fd5b81019080805190602001909291905050505061300d565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612fd057600080fd5b505af1158015612fe4573d6000803e3d6000fd5b505050506040513d6020811015612ffa57600080fd5b8101908080519060200190929190505050505b505050565b6130af8363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613504565b505050565b600080828401905083811015613132576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600033905090565b6000613218828573ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30876040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156131cf57600080fd5b505afa1580156131e3573d6000803e3d6000fd5b505050506040513d60208110156131f957600080fd5b81019080805190602001909291905050506130b490919063ffffffff16565b90506132b78463095ea7b360e01b8584604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613504565b50505050565b613378846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613504565b50505050565b6000808311829061342a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156133ef5780820151818401526020810190506133d4565b50505050905090810190601f16801561341c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161343657fe5b049050809150509392505050565b60008383111582906134f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156134b657808201518184015260208101905061349b565b50505050905090810190601f1680156134e35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b6060613566826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166135f39092919063ffffffff16565b90506000815111156135ee5780806020019051602081101561358757600080fd5b81019080805190602001909291905050506135ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613901602a913960400191505060405180910390fd5b5b505050565b6060613602848460008561360b565b90509392505050565b606082471015613666576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806138ba6026913960400191505060405180910390fd5b61366f856137b4565b6136e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310613731578051825260208201915060208101905060208303925061370e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613793576040519150601f19603f3d011682016040523d82523d6000602084013e613798565b606091505b50915091506137a88282866137c7565b92505050949350505050565b600080823b905060008111915050919050565b606083156137d75782905061388c565b6000835111156137ea5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613851578082015181840152602081019050613836565b50505050905090810190601f16801561387e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b939250505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212201f1cbee4914c60b8ca60c2383184ce43532f22245a1023d0d35b14ac22bd1b6164736f6c634300060c0033"

// DeployAuto deploys a new Ethereum contract, binding an instance of Auto to it.
func DeployAuto(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Auto, error) {
	parsed, err := abi.JSON(strings.NewReader(AutoABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AutoBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Auto{AutoCaller: AutoCaller{contract: contract}, AutoTransactor: AutoTransactor{contract: contract}, AutoFilterer: AutoFilterer{contract: contract}}, nil
}

// Auto is an auto generated Go binding around an Ethereum contract.
type Auto struct {
	AutoCaller     // Read-only binding to the contract
	AutoTransactor // Write-only binding to the contract
	AutoFilterer   // Log filterer for contract events
}

// AutoCaller is an auto generated read-only Go binding around an Ethereum contract.
type AutoCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AutoTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AutoTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AutoFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AutoFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AutoSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AutoSession struct {
	Contract     *Auto             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AutoCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AutoCallerSession struct {
	Contract *AutoCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// AutoTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AutoTransactorSession struct {
	Contract     *AutoTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AutoRaw is an auto generated low-level Go binding around an Ethereum contract.
type AutoRaw struct {
	Contract *Auto // Generic contract binding to access the raw methods on
}

// AutoCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AutoCallerRaw struct {
	Contract *AutoCaller // Generic read-only contract binding to access the raw methods on
}

// AutoTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AutoTransactorRaw struct {
	Contract *AutoTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAuto creates a new instance of Auto, bound to a specific deployed contract.
func NewAuto(address common.Address, backend bind.ContractBackend) (*Auto, error) {
	contract, err := bindAuto(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Auto{AutoCaller: AutoCaller{contract: contract}, AutoTransactor: AutoTransactor{contract: contract}, AutoFilterer: AutoFilterer{contract: contract}}, nil
}

// NewAutoCaller creates a new read-only instance of Auto, bound to a specific deployed contract.
func NewAutoCaller(address common.Address, caller bind.ContractCaller) (*AutoCaller, error) {
	contract, err := bindAuto(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AutoCaller{contract: contract}, nil
}

// NewAutoTransactor creates a new write-only instance of Auto, bound to a specific deployed contract.
func NewAutoTransactor(address common.Address, transactor bind.ContractTransactor) (*AutoTransactor, error) {
	contract, err := bindAuto(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AutoTransactor{contract: contract}, nil
}

// NewAutoFilterer creates a new log filterer instance of Auto, bound to a specific deployed contract.
func NewAutoFilterer(address common.Address, filterer bind.ContractFilterer) (*AutoFilterer, error) {
	contract, err := bindAuto(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AutoFilterer{contract: contract}, nil
}

// bindAuto binds a generic wrapper to an already deployed contract.
func bindAuto(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AutoABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Auto *AutoRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Auto.Contract.AutoCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Auto *AutoRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Auto.Contract.AutoTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Auto *AutoRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Auto.Contract.AutoTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Auto *AutoCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Auto.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Auto *AutoTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Auto.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Auto *AutoTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Auto.Contract.contract.Transact(opts, method, params...)
}

// AUTO is a free data retrieval call binding the contract method 0x69f94adf.
//
// Solidity: function AUTO() view returns(address)
func (_Auto *AutoCaller) AUTO(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Auto.contract.Call(opts, &out, "AUTO")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AUTO is a free data retrieval call binding the contract method 0x69f94adf.
//
// Solidity: function AUTO() view returns(address)
func (_Auto *AutoSession) AUTO() (common.Address, error) {
	return _Auto.Contract.AUTO(&_Auto.CallOpts)
}

// AUTO is a free data retrieval call binding the contract method 0x69f94adf.
//
// Solidity: function AUTO() view returns(address)
func (_Auto *AutoCallerSession) AUTO() (common.Address, error) {
	return _Auto.Contract.AUTO(&_Auto.CallOpts)
}

// AUTOMaxSupply is a free data retrieval call binding the contract method 0xa96fe443.
//
// Solidity: function AUTOMaxSupply() view returns(uint256)
func (_Auto *AutoCaller) AUTOMaxSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Auto.contract.Call(opts, &out, "AUTOMaxSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AUTOMaxSupply is a free data retrieval call binding the contract method 0xa96fe443.
//
// Solidity: function AUTOMaxSupply() view returns(uint256)
func (_Auto *AutoSession) AUTOMaxSupply() (*big.Int, error) {
	return _Auto.Contract.AUTOMaxSupply(&_Auto.CallOpts)
}

// AUTOMaxSupply is a free data retrieval call binding the contract method 0xa96fe443.
//
// Solidity: function AUTOMaxSupply() view returns(uint256)
func (_Auto *AutoCallerSession) AUTOMaxSupply() (*big.Int, error) {
	return _Auto.Contract.AUTOMaxSupply(&_Auto.CallOpts)
}

// AUTOPerBlock is a free data retrieval call binding the contract method 0xe7fa1e86.
//
// Solidity: function AUTOPerBlock() view returns(uint256)
func (_Auto *AutoCaller) AUTOPerBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Auto.contract.Call(opts, &out, "AUTOPerBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AUTOPerBlock is a free data retrieval call binding the contract method 0xe7fa1e86.
//
// Solidity: function AUTOPerBlock() view returns(uint256)
func (_Auto *AutoSession) AUTOPerBlock() (*big.Int, error) {
	return _Auto.Contract.AUTOPerBlock(&_Auto.CallOpts)
}

// AUTOPerBlock is a free data retrieval call binding the contract method 0xe7fa1e86.
//
// Solidity: function AUTOPerBlock() view returns(uint256)
func (_Auto *AutoCallerSession) AUTOPerBlock() (*big.Int, error) {
	return _Auto.Contract.AUTOPerBlock(&_Auto.CallOpts)
}

// AUTOv2 is a free data retrieval call binding the contract method 0xe8af6aff.
//
// Solidity: function AUTOv2() view returns(address)
func (_Auto *AutoCaller) AUTOv2(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Auto.contract.Call(opts, &out, "AUTOv2")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AUTOv2 is a free data retrieval call binding the contract method 0xe8af6aff.
//
// Solidity: function AUTOv2() view returns(address)
func (_Auto *AutoSession) AUTOv2() (common.Address, error) {
	return _Auto.Contract.AUTOv2(&_Auto.CallOpts)
}

// AUTOv2 is a free data retrieval call binding the contract method 0xe8af6aff.
//
// Solidity: function AUTOv2() view returns(address)
func (_Auto *AutoCallerSession) AUTOv2() (common.Address, error) {
	return _Auto.Contract.AUTOv2(&_Auto.CallOpts)
}

// BurnAddress is a free data retrieval call binding the contract method 0x70d5ae05.
//
// Solidity: function burnAddress() view returns(address)
func (_Auto *AutoCaller) BurnAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Auto.contract.Call(opts, &out, "burnAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BurnAddress is a free data retrieval call binding the contract method 0x70d5ae05.
//
// Solidity: function burnAddress() view returns(address)
func (_Auto *AutoSession) BurnAddress() (common.Address, error) {
	return _Auto.Contract.BurnAddress(&_Auto.CallOpts)
}

// BurnAddress is a free data retrieval call binding the contract method 0x70d5ae05.
//
// Solidity: function burnAddress() view returns(address)
func (_Auto *AutoCallerSession) BurnAddress() (common.Address, error) {
	return _Auto.Contract.BurnAddress(&_Auto.CallOpts)
}

// GetMultiplier is a free data retrieval call binding the contract method 0x8dbb1e3a.
//
// Solidity: function getMultiplier(uint256 _from, uint256 _to) view returns(uint256)
func (_Auto *AutoCaller) GetMultiplier(opts *bind.CallOpts, _from *big.Int, _to *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Auto.contract.Call(opts, &out, "getMultiplier", _from, _to)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMultiplier is a free data retrieval call binding the contract method 0x8dbb1e3a.
//
// Solidity: function getMultiplier(uint256 _from, uint256 _to) view returns(uint256)
func (_Auto *AutoSession) GetMultiplier(_from *big.Int, _to *big.Int) (*big.Int, error) {
	return _Auto.Contract.GetMultiplier(&_Auto.CallOpts, _from, _to)
}

// GetMultiplier is a free data retrieval call binding the contract method 0x8dbb1e3a.
//
// Solidity: function getMultiplier(uint256 _from, uint256 _to) view returns(uint256)
func (_Auto *AutoCallerSession) GetMultiplier(_from *big.Int, _to *big.Int) (*big.Int, error) {
	return _Auto.Contract.GetMultiplier(&_Auto.CallOpts, _from, _to)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Auto *AutoCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Auto.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Auto *AutoSession) Owner() (common.Address, error) {
	return _Auto.Contract.Owner(&_Auto.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Auto *AutoCallerSession) Owner() (common.Address, error) {
	return _Auto.Contract.Owner(&_Auto.CallOpts)
}

// OwnerAUTOReward is a free data retrieval call binding the contract method 0x015ffb41.
//
// Solidity: function ownerAUTOReward() view returns(uint256)
func (_Auto *AutoCaller) OwnerAUTOReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Auto.contract.Call(opts, &out, "ownerAUTOReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// OwnerAUTOReward is a free data retrieval call binding the contract method 0x015ffb41.
//
// Solidity: function ownerAUTOReward() view returns(uint256)
func (_Auto *AutoSession) OwnerAUTOReward() (*big.Int, error) {
	return _Auto.Contract.OwnerAUTOReward(&_Auto.CallOpts)
}

// OwnerAUTOReward is a free data retrieval call binding the contract method 0x015ffb41.
//
// Solidity: function ownerAUTOReward() view returns(uint256)
func (_Auto *AutoCallerSession) OwnerAUTOReward() (*big.Int, error) {
	return _Auto.Contract.OwnerAUTOReward(&_Auto.CallOpts)
}

// PendingAUTO is a free data retrieval call binding the contract method 0xc0660d1d.
//
// Solidity: function pendingAUTO(uint256 _pid, address _user) view returns(uint256)
func (_Auto *AutoCaller) PendingAUTO(opts *bind.CallOpts, _pid *big.Int, _user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Auto.contract.Call(opts, &out, "pendingAUTO", _pid, _user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PendingAUTO is a free data retrieval call binding the contract method 0xc0660d1d.
//
// Solidity: function pendingAUTO(uint256 _pid, address _user) view returns(uint256)
func (_Auto *AutoSession) PendingAUTO(_pid *big.Int, _user common.Address) (*big.Int, error) {
	return _Auto.Contract.PendingAUTO(&_Auto.CallOpts, _pid, _user)
}

// PendingAUTO is a free data retrieval call binding the contract method 0xc0660d1d.
//
// Solidity: function pendingAUTO(uint256 _pid, address _user) view returns(uint256)
func (_Auto *AutoCallerSession) PendingAUTO(_pid *big.Int, _user common.Address) (*big.Int, error) {
	return _Auto.Contract.PendingAUTO(&_Auto.CallOpts, _pid, _user)
}

// PoolInfo is a free data retrieval call binding the contract method 0x1526fe27.
//
// Solidity: function poolInfo(uint256 ) view returns(address want, uint256 allocPoint, uint256 lastRewardBlock, uint256 accAUTOPerShare, address strat)
func (_Auto *AutoCaller) PoolInfo(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Want            common.Address
	AllocPoint      *big.Int
	LastRewardBlock *big.Int
	AccAUTOPerShare *big.Int
	Strat           common.Address
}, error) {
	var out []interface{}
	err := _Auto.contract.Call(opts, &out, "poolInfo", arg0)

	outstruct := new(struct {
		Want            common.Address
		AllocPoint      *big.Int
		LastRewardBlock *big.Int
		AccAUTOPerShare *big.Int
		Strat           common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Want = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.AllocPoint = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.LastRewardBlock = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.AccAUTOPerShare = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.Strat = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// PoolInfo is a free data retrieval call binding the contract method 0x1526fe27.
//
// Solidity: function poolInfo(uint256 ) view returns(address want, uint256 allocPoint, uint256 lastRewardBlock, uint256 accAUTOPerShare, address strat)
func (_Auto *AutoSession) PoolInfo(arg0 *big.Int) (struct {
	Want            common.Address
	AllocPoint      *big.Int
	LastRewardBlock *big.Int
	AccAUTOPerShare *big.Int
	Strat           common.Address
}, error) {
	return _Auto.Contract.PoolInfo(&_Auto.CallOpts, arg0)
}

// PoolInfo is a free data retrieval call binding the contract method 0x1526fe27.
//
// Solidity: function poolInfo(uint256 ) view returns(address want, uint256 allocPoint, uint256 lastRewardBlock, uint256 accAUTOPerShare, address strat)
func (_Auto *AutoCallerSession) PoolInfo(arg0 *big.Int) (struct {
	Want            common.Address
	AllocPoint      *big.Int
	LastRewardBlock *big.Int
	AccAUTOPerShare *big.Int
	Strat           common.Address
}, error) {
	return _Auto.Contract.PoolInfo(&_Auto.CallOpts, arg0)
}

// PoolLength is a free data retrieval call binding the contract method 0x081e3eda.
//
// Solidity: function poolLength() view returns(uint256)
func (_Auto *AutoCaller) PoolLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Auto.contract.Call(opts, &out, "poolLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PoolLength is a free data retrieval call binding the contract method 0x081e3eda.
//
// Solidity: function poolLength() view returns(uint256)
func (_Auto *AutoSession) PoolLength() (*big.Int, error) {
	return _Auto.Contract.PoolLength(&_Auto.CallOpts)
}

// PoolLength is a free data retrieval call binding the contract method 0x081e3eda.
//
// Solidity: function poolLength() view returns(uint256)
func (_Auto *AutoCallerSession) PoolLength() (*big.Int, error) {
	return _Auto.Contract.PoolLength(&_Auto.CallOpts)
}

// StakedWantTokens is a free data retrieval call binding the contract method 0x7b84daec.
//
// Solidity: function stakedWantTokens(uint256 _pid, address _user) view returns(uint256)
func (_Auto *AutoCaller) StakedWantTokens(opts *bind.CallOpts, _pid *big.Int, _user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Auto.contract.Call(opts, &out, "stakedWantTokens", _pid, _user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakedWantTokens is a free data retrieval call binding the contract method 0x7b84daec.
//
// Solidity: function stakedWantTokens(uint256 _pid, address _user) view returns(uint256)
func (_Auto *AutoSession) StakedWantTokens(_pid *big.Int, _user common.Address) (*big.Int, error) {
	return _Auto.Contract.StakedWantTokens(&_Auto.CallOpts, _pid, _user)
}

// StakedWantTokens is a free data retrieval call binding the contract method 0x7b84daec.
//
// Solidity: function stakedWantTokens(uint256 _pid, address _user) view returns(uint256)
func (_Auto *AutoCallerSession) StakedWantTokens(_pid *big.Int, _user common.Address) (*big.Int, error) {
	return _Auto.Contract.StakedWantTokens(&_Auto.CallOpts, _pid, _user)
}

// StartBlock is a free data retrieval call binding the contract method 0x48cd4cb1.
//
// Solidity: function startBlock() view returns(uint256)
func (_Auto *AutoCaller) StartBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Auto.contract.Call(opts, &out, "startBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StartBlock is a free data retrieval call binding the contract method 0x48cd4cb1.
//
// Solidity: function startBlock() view returns(uint256)
func (_Auto *AutoSession) StartBlock() (*big.Int, error) {
	return _Auto.Contract.StartBlock(&_Auto.CallOpts)
}

// StartBlock is a free data retrieval call binding the contract method 0x48cd4cb1.
//
// Solidity: function startBlock() view returns(uint256)
func (_Auto *AutoCallerSession) StartBlock() (*big.Int, error) {
	return _Auto.Contract.StartBlock(&_Auto.CallOpts)
}

// TotalAllocPoint is a free data retrieval call binding the contract method 0x17caf6f1.
//
// Solidity: function totalAllocPoint() view returns(uint256)
func (_Auto *AutoCaller) TotalAllocPoint(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Auto.contract.Call(opts, &out, "totalAllocPoint")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalAllocPoint is a free data retrieval call binding the contract method 0x17caf6f1.
//
// Solidity: function totalAllocPoint() view returns(uint256)
func (_Auto *AutoSession) TotalAllocPoint() (*big.Int, error) {
	return _Auto.Contract.TotalAllocPoint(&_Auto.CallOpts)
}

// TotalAllocPoint is a free data retrieval call binding the contract method 0x17caf6f1.
//
// Solidity: function totalAllocPoint() view returns(uint256)
func (_Auto *AutoCallerSession) TotalAllocPoint() (*big.Int, error) {
	return _Auto.Contract.TotalAllocPoint(&_Auto.CallOpts)
}

// UserInfo is a free data retrieval call binding the contract method 0x93f1a40b.
//
// Solidity: function userInfo(uint256 , address ) view returns(uint256 shares, uint256 rewardDebt)
func (_Auto *AutoCaller) UserInfo(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (struct {
	Shares     *big.Int
	RewardDebt *big.Int
}, error) {
	var out []interface{}
	err := _Auto.contract.Call(opts, &out, "userInfo", arg0, arg1)

	outstruct := new(struct {
		Shares     *big.Int
		RewardDebt *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Shares = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.RewardDebt = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// UserInfo is a free data retrieval call binding the contract method 0x93f1a40b.
//
// Solidity: function userInfo(uint256 , address ) view returns(uint256 shares, uint256 rewardDebt)
func (_Auto *AutoSession) UserInfo(arg0 *big.Int, arg1 common.Address) (struct {
	Shares     *big.Int
	RewardDebt *big.Int
}, error) {
	return _Auto.Contract.UserInfo(&_Auto.CallOpts, arg0, arg1)
}

// UserInfo is a free data retrieval call binding the contract method 0x93f1a40b.
//
// Solidity: function userInfo(uint256 , address ) view returns(uint256 shares, uint256 rewardDebt)
func (_Auto *AutoCallerSession) UserInfo(arg0 *big.Int, arg1 common.Address) (struct {
	Shares     *big.Int
	RewardDebt *big.Int
}, error) {
	return _Auto.Contract.UserInfo(&_Auto.CallOpts, arg0, arg1)
}

// Add is a paid mutator transaction binding the contract method 0x5f70edcf.
//
// Solidity: function add(uint256 _allocPoint, address _want, bool _withUpdate, address _strat) returns()
func (_Auto *AutoTransactor) Add(opts *bind.TransactOpts, _allocPoint *big.Int, _want common.Address, _withUpdate bool, _strat common.Address) (*types.Transaction, error) {
	return _Auto.contract.Transact(opts, "add", _allocPoint, _want, _withUpdate, _strat)
}

// Add is a paid mutator transaction binding the contract method 0x5f70edcf.
//
// Solidity: function add(uint256 _allocPoint, address _want, bool _withUpdate, address _strat) returns()
func (_Auto *AutoSession) Add(_allocPoint *big.Int, _want common.Address, _withUpdate bool, _strat common.Address) (*types.Transaction, error) {
	return _Auto.Contract.Add(&_Auto.TransactOpts, _allocPoint, _want, _withUpdate, _strat)
}

// Add is a paid mutator transaction binding the contract method 0x5f70edcf.
//
// Solidity: function add(uint256 _allocPoint, address _want, bool _withUpdate, address _strat) returns()
func (_Auto *AutoTransactorSession) Add(_allocPoint *big.Int, _want common.Address, _withUpdate bool, _strat common.Address) (*types.Transaction, error) {
	return _Auto.Contract.Add(&_Auto.TransactOpts, _allocPoint, _want, _withUpdate, _strat)
}

// Deposit is a paid mutator transaction binding the contract method 0xe2bbb158.
//
// Solidity: function deposit(uint256 _pid, uint256 _wantAmt) returns()
func (_Auto *AutoTransactor) Deposit(opts *bind.TransactOpts, _pid *big.Int, _wantAmt *big.Int) (*types.Transaction, error) {
	return _Auto.contract.Transact(opts, "deposit", _pid, _wantAmt)
}

// Deposit is a paid mutator transaction binding the contract method 0xe2bbb158.
//
// Solidity: function deposit(uint256 _pid, uint256 _wantAmt) returns()
func (_Auto *AutoSession) Deposit(_pid *big.Int, _wantAmt *big.Int) (*types.Transaction, error) {
	return _Auto.Contract.Deposit(&_Auto.TransactOpts, _pid, _wantAmt)
}

// Deposit is a paid mutator transaction binding the contract method 0xe2bbb158.
//
// Solidity: function deposit(uint256 _pid, uint256 _wantAmt) returns()
func (_Auto *AutoTransactorSession) Deposit(_pid *big.Int, _wantAmt *big.Int) (*types.Transaction, error) {
	return _Auto.Contract.Deposit(&_Auto.TransactOpts, _pid, _wantAmt)
}

// EmergencyWithdraw is a paid mutator transaction binding the contract method 0x5312ea8e.
//
// Solidity: function emergencyWithdraw(uint256 _pid) returns()
func (_Auto *AutoTransactor) EmergencyWithdraw(opts *bind.TransactOpts, _pid *big.Int) (*types.Transaction, error) {
	return _Auto.contract.Transact(opts, "emergencyWithdraw", _pid)
}

// EmergencyWithdraw is a paid mutator transaction binding the contract method 0x5312ea8e.
//
// Solidity: function emergencyWithdraw(uint256 _pid) returns()
func (_Auto *AutoSession) EmergencyWithdraw(_pid *big.Int) (*types.Transaction, error) {
	return _Auto.Contract.EmergencyWithdraw(&_Auto.TransactOpts, _pid)
}

// EmergencyWithdraw is a paid mutator transaction binding the contract method 0x5312ea8e.
//
// Solidity: function emergencyWithdraw(uint256 _pid) returns()
func (_Auto *AutoTransactorSession) EmergencyWithdraw(_pid *big.Int) (*types.Transaction, error) {
	return _Auto.Contract.EmergencyWithdraw(&_Auto.TransactOpts, _pid)
}

// InCaseTokensGetStuck is a paid mutator transaction binding the contract method 0xc6d758cb.
//
// Solidity: function inCaseTokensGetStuck(address _token, uint256 _amount) returns()
func (_Auto *AutoTransactor) InCaseTokensGetStuck(opts *bind.TransactOpts, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Auto.contract.Transact(opts, "inCaseTokensGetStuck", _token, _amount)
}

// InCaseTokensGetStuck is a paid mutator transaction binding the contract method 0xc6d758cb.
//
// Solidity: function inCaseTokensGetStuck(address _token, uint256 _amount) returns()
func (_Auto *AutoSession) InCaseTokensGetStuck(_token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Auto.Contract.InCaseTokensGetStuck(&_Auto.TransactOpts, _token, _amount)
}

// InCaseTokensGetStuck is a paid mutator transaction binding the contract method 0xc6d758cb.
//
// Solidity: function inCaseTokensGetStuck(address _token, uint256 _amount) returns()
func (_Auto *AutoTransactorSession) InCaseTokensGetStuck(_token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Auto.Contract.InCaseTokensGetStuck(&_Auto.TransactOpts, _token, _amount)
}

// MassUpdatePools is a paid mutator transaction binding the contract method 0x630b5ba1.
//
// Solidity: function massUpdatePools() returns()
func (_Auto *AutoTransactor) MassUpdatePools(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Auto.contract.Transact(opts, "massUpdatePools")
}

// MassUpdatePools is a paid mutator transaction binding the contract method 0x630b5ba1.
//
// Solidity: function massUpdatePools() returns()
func (_Auto *AutoSession) MassUpdatePools() (*types.Transaction, error) {
	return _Auto.Contract.MassUpdatePools(&_Auto.TransactOpts)
}

// MassUpdatePools is a paid mutator transaction binding the contract method 0x630b5ba1.
//
// Solidity: function massUpdatePools() returns()
func (_Auto *AutoTransactorSession) MassUpdatePools() (*types.Transaction, error) {
	return _Auto.Contract.MassUpdatePools(&_Auto.TransactOpts)
}

// MigrateToAUTOv2 is a paid mutator transaction binding the contract method 0xaceb7110.
//
// Solidity: function migrateToAUTOv2(uint256 _inputAmt) returns()
func (_Auto *AutoTransactor) MigrateToAUTOv2(opts *bind.TransactOpts, _inputAmt *big.Int) (*types.Transaction, error) {
	return _Auto.contract.Transact(opts, "migrateToAUTOv2", _inputAmt)
}

// MigrateToAUTOv2 is a paid mutator transaction binding the contract method 0xaceb7110.
//
// Solidity: function migrateToAUTOv2(uint256 _inputAmt) returns()
func (_Auto *AutoSession) MigrateToAUTOv2(_inputAmt *big.Int) (*types.Transaction, error) {
	return _Auto.Contract.MigrateToAUTOv2(&_Auto.TransactOpts, _inputAmt)
}

// MigrateToAUTOv2 is a paid mutator transaction binding the contract method 0xaceb7110.
//
// Solidity: function migrateToAUTOv2(uint256 _inputAmt) returns()
func (_Auto *AutoTransactorSession) MigrateToAUTOv2(_inputAmt *big.Int) (*types.Transaction, error) {
	return _Auto.Contract.MigrateToAUTOv2(&_Auto.TransactOpts, _inputAmt)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Auto *AutoTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Auto.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Auto *AutoSession) RenounceOwnership() (*types.Transaction, error) {
	return _Auto.Contract.RenounceOwnership(&_Auto.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Auto *AutoTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Auto.Contract.RenounceOwnership(&_Auto.TransactOpts)
}

// Set is a paid mutator transaction binding the contract method 0x64482f79.
//
// Solidity: function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) returns()
func (_Auto *AutoTransactor) Set(opts *bind.TransactOpts, _pid *big.Int, _allocPoint *big.Int, _withUpdate bool) (*types.Transaction, error) {
	return _Auto.contract.Transact(opts, "set", _pid, _allocPoint, _withUpdate)
}

// Set is a paid mutator transaction binding the contract method 0x64482f79.
//
// Solidity: function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) returns()
func (_Auto *AutoSession) Set(_pid *big.Int, _allocPoint *big.Int, _withUpdate bool) (*types.Transaction, error) {
	return _Auto.Contract.Set(&_Auto.TransactOpts, _pid, _allocPoint, _withUpdate)
}

// Set is a paid mutator transaction binding the contract method 0x64482f79.
//
// Solidity: function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) returns()
func (_Auto *AutoTransactorSession) Set(_pid *big.Int, _allocPoint *big.Int, _withUpdate bool) (*types.Transaction, error) {
	return _Auto.Contract.Set(&_Auto.TransactOpts, _pid, _allocPoint, _withUpdate)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Auto *AutoTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Auto.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Auto *AutoSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Auto.Contract.TransferOwnership(&_Auto.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Auto *AutoTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Auto.Contract.TransferOwnership(&_Auto.TransactOpts, newOwner)
}

// UpdatePool is a paid mutator transaction binding the contract method 0x51eb05a6.
//
// Solidity: function updatePool(uint256 _pid) returns()
func (_Auto *AutoTransactor) UpdatePool(opts *bind.TransactOpts, _pid *big.Int) (*types.Transaction, error) {
	return _Auto.contract.Transact(opts, "updatePool", _pid)
}

// UpdatePool is a paid mutator transaction binding the contract method 0x51eb05a6.
//
// Solidity: function updatePool(uint256 _pid) returns()
func (_Auto *AutoSession) UpdatePool(_pid *big.Int) (*types.Transaction, error) {
	return _Auto.Contract.UpdatePool(&_Auto.TransactOpts, _pid)
}

// UpdatePool is a paid mutator transaction binding the contract method 0x51eb05a6.
//
// Solidity: function updatePool(uint256 _pid) returns()
func (_Auto *AutoTransactorSession) UpdatePool(_pid *big.Int) (*types.Transaction, error) {
	return _Auto.Contract.UpdatePool(&_Auto.TransactOpts, _pid)
}

// Withdraw is a paid mutator transaction binding the contract method 0x441a3e70.
//
// Solidity: function withdraw(uint256 _pid, uint256 _wantAmt) returns()
func (_Auto *AutoTransactor) Withdraw(opts *bind.TransactOpts, _pid *big.Int, _wantAmt *big.Int) (*types.Transaction, error) {
	return _Auto.contract.Transact(opts, "withdraw", _pid, _wantAmt)
}

// Withdraw is a paid mutator transaction binding the contract method 0x441a3e70.
//
// Solidity: function withdraw(uint256 _pid, uint256 _wantAmt) returns()
func (_Auto *AutoSession) Withdraw(_pid *big.Int, _wantAmt *big.Int) (*types.Transaction, error) {
	return _Auto.Contract.Withdraw(&_Auto.TransactOpts, _pid, _wantAmt)
}

// Withdraw is a paid mutator transaction binding the contract method 0x441a3e70.
//
// Solidity: function withdraw(uint256 _pid, uint256 _wantAmt) returns()
func (_Auto *AutoTransactorSession) Withdraw(_pid *big.Int, _wantAmt *big.Int) (*types.Transaction, error) {
	return _Auto.Contract.Withdraw(&_Auto.TransactOpts, _pid, _wantAmt)
}

// WithdrawAll is a paid mutator transaction binding the contract method 0x958e2d31.
//
// Solidity: function withdrawAll(uint256 _pid) returns()
func (_Auto *AutoTransactor) WithdrawAll(opts *bind.TransactOpts, _pid *big.Int) (*types.Transaction, error) {
	return _Auto.contract.Transact(opts, "withdrawAll", _pid)
}

// WithdrawAll is a paid mutator transaction binding the contract method 0x958e2d31.
//
// Solidity: function withdrawAll(uint256 _pid) returns()
func (_Auto *AutoSession) WithdrawAll(_pid *big.Int) (*types.Transaction, error) {
	return _Auto.Contract.WithdrawAll(&_Auto.TransactOpts, _pid)
}

// WithdrawAll is a paid mutator transaction binding the contract method 0x958e2d31.
//
// Solidity: function withdrawAll(uint256 _pid) returns()
func (_Auto *AutoTransactorSession) WithdrawAll(_pid *big.Int) (*types.Transaction, error) {
	return _Auto.Contract.WithdrawAll(&_Auto.TransactOpts, _pid)
}

// AutoDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Auto contract.
type AutoDepositIterator struct {
	Event *AutoDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutoDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutoDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutoDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutoDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutoDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutoDeposit represents a Deposit event raised by the Auto contract.
type AutoDeposit struct {
	User   common.Address
	Pid    *big.Int
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15.
//
// Solidity: event Deposit(address indexed user, uint256 indexed pid, uint256 amount)
func (_Auto *AutoFilterer) FilterDeposit(opts *bind.FilterOpts, user []common.Address, pid []*big.Int) (*AutoDepositIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var pidRule []interface{}
	for _, pidItem := range pid {
		pidRule = append(pidRule, pidItem)
	}

	logs, sub, err := _Auto.contract.FilterLogs(opts, "Deposit", userRule, pidRule)
	if err != nil {
		return nil, err
	}
	return &AutoDepositIterator{contract: _Auto.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15.
//
// Solidity: event Deposit(address indexed user, uint256 indexed pid, uint256 amount)
func (_Auto *AutoFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *AutoDeposit, user []common.Address, pid []*big.Int) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var pidRule []interface{}
	for _, pidItem := range pid {
		pidRule = append(pidRule, pidItem)
	}

	logs, sub, err := _Auto.contract.WatchLogs(opts, "Deposit", userRule, pidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutoDeposit)
				if err := _Auto.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15.
//
// Solidity: event Deposit(address indexed user, uint256 indexed pid, uint256 amount)
func (_Auto *AutoFilterer) ParseDeposit(log types.Log) (*AutoDeposit, error) {
	event := new(AutoDeposit)
	if err := _Auto.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutoEmergencyWithdrawIterator is returned from FilterEmergencyWithdraw and is used to iterate over the raw logs and unpacked data for EmergencyWithdraw events raised by the Auto contract.
type AutoEmergencyWithdrawIterator struct {
	Event *AutoEmergencyWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutoEmergencyWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutoEmergencyWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutoEmergencyWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutoEmergencyWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutoEmergencyWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutoEmergencyWithdraw represents a EmergencyWithdraw event raised by the Auto contract.
type AutoEmergencyWithdraw struct {
	User   common.Address
	Pid    *big.Int
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterEmergencyWithdraw is a free log retrieval operation binding the contract event 0xbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae0595.
//
// Solidity: event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount)
func (_Auto *AutoFilterer) FilterEmergencyWithdraw(opts *bind.FilterOpts, user []common.Address, pid []*big.Int) (*AutoEmergencyWithdrawIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var pidRule []interface{}
	for _, pidItem := range pid {
		pidRule = append(pidRule, pidItem)
	}

	logs, sub, err := _Auto.contract.FilterLogs(opts, "EmergencyWithdraw", userRule, pidRule)
	if err != nil {
		return nil, err
	}
	return &AutoEmergencyWithdrawIterator{contract: _Auto.contract, event: "EmergencyWithdraw", logs: logs, sub: sub}, nil
}

// WatchEmergencyWithdraw is a free log subscription operation binding the contract event 0xbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae0595.
//
// Solidity: event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount)
func (_Auto *AutoFilterer) WatchEmergencyWithdraw(opts *bind.WatchOpts, sink chan<- *AutoEmergencyWithdraw, user []common.Address, pid []*big.Int) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var pidRule []interface{}
	for _, pidItem := range pid {
		pidRule = append(pidRule, pidItem)
	}

	logs, sub, err := _Auto.contract.WatchLogs(opts, "EmergencyWithdraw", userRule, pidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutoEmergencyWithdraw)
				if err := _Auto.contract.UnpackLog(event, "EmergencyWithdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEmergencyWithdraw is a log parse operation binding the contract event 0xbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae0595.
//
// Solidity: event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount)
func (_Auto *AutoFilterer) ParseEmergencyWithdraw(log types.Log) (*AutoEmergencyWithdraw, error) {
	event := new(AutoEmergencyWithdraw)
	if err := _Auto.contract.UnpackLog(event, "EmergencyWithdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutoOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Auto contract.
type AutoOwnershipTransferredIterator struct {
	Event *AutoOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutoOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutoOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutoOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutoOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutoOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutoOwnershipTransferred represents a OwnershipTransferred event raised by the Auto contract.
type AutoOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Auto *AutoFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*AutoOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Auto.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &AutoOwnershipTransferredIterator{contract: _Auto.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Auto *AutoFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *AutoOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Auto.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutoOwnershipTransferred)
				if err := _Auto.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Auto *AutoFilterer) ParseOwnershipTransferred(log types.Log) (*AutoOwnershipTransferred, error) {
	event := new(AutoOwnershipTransferred)
	if err := _Auto.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutoWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Auto contract.
type AutoWithdrawIterator struct {
	Event *AutoWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutoWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutoWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutoWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutoWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutoWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutoWithdraw represents a Withdraw event raised by the Auto contract.
type AutoWithdraw struct {
	User   common.Address
	Pid    *big.Int
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0xf279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568.
//
// Solidity: event Withdraw(address indexed user, uint256 indexed pid, uint256 amount)
func (_Auto *AutoFilterer) FilterWithdraw(opts *bind.FilterOpts, user []common.Address, pid []*big.Int) (*AutoWithdrawIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var pidRule []interface{}
	for _, pidItem := range pid {
		pidRule = append(pidRule, pidItem)
	}

	logs, sub, err := _Auto.contract.FilterLogs(opts, "Withdraw", userRule, pidRule)
	if err != nil {
		return nil, err
	}
	return &AutoWithdrawIterator{contract: _Auto.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0xf279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568.
//
// Solidity: event Withdraw(address indexed user, uint256 indexed pid, uint256 amount)
func (_Auto *AutoFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *AutoWithdraw, user []common.Address, pid []*big.Int) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var pidRule []interface{}
	for _, pidItem := range pid {
		pidRule = append(pidRule, pidItem)
	}

	logs, sub, err := _Auto.contract.WatchLogs(opts, "Withdraw", userRule, pidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutoWithdraw)
				if err := _Auto.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0xf279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568.
//
// Solidity: event Withdraw(address indexed user, uint256 indexed pid, uint256 amount)
func (_Auto *AutoFilterer) ParseWithdraw(log types.Log) (*AutoWithdraw, error) {
	event := new(AutoWithdraw)
	if err := _Auto.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
