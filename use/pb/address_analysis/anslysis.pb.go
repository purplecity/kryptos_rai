// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: anslysis.proto

package address_analysis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HA_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestInfo []*HA_Single_Request `protobuf:"bytes,1,rep,name=request_info,json=requestInfo,proto3" json:"request_info,omitempty"`
	Chain       string               `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (x *HA_Request) Reset() {
	*x = HA_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anslysis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HA_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HA_Request) ProtoMessage() {}

func (x *HA_Request) ProtoReflect() protoreflect.Message {
	mi := &file_anslysis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HA_Request.ProtoReflect.Descriptor instead.
func (*HA_Request) Descriptor() ([]byte, []int) {
	return file_anslysis_proto_rawDescGZIP(), []int{0}
}

func (x *HA_Request) GetRequestInfo() []*HA_Single_Request {
	if x != nil {
		return x.RequestInfo
	}
	return nil
}

func (x *HA_Request) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

type HA_Single_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryAdddress        string              `protobuf:"bytes,1,opt,name=query_adddress,json=queryAdddress,proto3" json:"query_adddress,omitempty"`
	PoolAddress          string              `protobuf:"bytes,2,opt,name=pool_address,json=poolAddress,proto3" json:"pool_address,omitempty"`
	PoolHasCertificate   bool                `protobuf:"varint,3,opt,name=pool_has_certificate,json=poolHasCertificate,proto3" json:"pool_has_certificate,omitempty"`
	CertificateAddress   string              `protobuf:"bytes,4,opt,name=certificate_address,json=certificateAddress,proto3" json:"certificate_address,omitempty"`
	CertificateTokenName string              `protobuf:"bytes,5,opt,name=certificate_token_name,json=certificateTokenName,proto3" json:"certificate_token_name,omitempty"`
	CertificatePrecision int32               `protobuf:"varint,6,opt,name=certificate_precision,json=certificatePrecision,proto3" json:"certificate_precision,omitempty"`
	InputTokenList       []*InputToken       `protobuf:"bytes,7,rep,name=input_token_list,json=inputTokenList,proto3" json:"input_token_list,omitempty"`
	RewardTokenList      []*RewardToken      `protobuf:"bytes,8,rep,name=reward_token_list,json=rewardTokenList,proto3" json:"reward_token_list,omitempty"`
	Platform             string              `protobuf:"bytes,9,opt,name=platform,proto3" json:"platform,omitempty"`
	PoolType             string              `protobuf:"bytes,10,opt,name=pool_type,json=poolType,proto3" json:"pool_type,omitempty"`
	MasterChelfList      []*MasterChelfToken `protobuf:"bytes,11,rep,name=master_chelf_list,json=masterChelfList,proto3" json:"master_chelf_list,omitempty"`
}

func (x *HA_Single_Request) Reset() {
	*x = HA_Single_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anslysis_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HA_Single_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HA_Single_Request) ProtoMessage() {}

func (x *HA_Single_Request) ProtoReflect() protoreflect.Message {
	mi := &file_anslysis_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HA_Single_Request.ProtoReflect.Descriptor instead.
func (*HA_Single_Request) Descriptor() ([]byte, []int) {
	return file_anslysis_proto_rawDescGZIP(), []int{1}
}

func (x *HA_Single_Request) GetQueryAdddress() string {
	if x != nil {
		return x.QueryAdddress
	}
	return ""
}

func (x *HA_Single_Request) GetPoolAddress() string {
	if x != nil {
		return x.PoolAddress
	}
	return ""
}

func (x *HA_Single_Request) GetPoolHasCertificate() bool {
	if x != nil {
		return x.PoolHasCertificate
	}
	return false
}

func (x *HA_Single_Request) GetCertificateAddress() string {
	if x != nil {
		return x.CertificateAddress
	}
	return ""
}

func (x *HA_Single_Request) GetCertificateTokenName() string {
	if x != nil {
		return x.CertificateTokenName
	}
	return ""
}

func (x *HA_Single_Request) GetCertificatePrecision() int32 {
	if x != nil {
		return x.CertificatePrecision
	}
	return 0
}

func (x *HA_Single_Request) GetInputTokenList() []*InputToken {
	if x != nil {
		return x.InputTokenList
	}
	return nil
}

func (x *HA_Single_Request) GetRewardTokenList() []*RewardToken {
	if x != nil {
		return x.RewardTokenList
	}
	return nil
}

func (x *HA_Single_Request) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *HA_Single_Request) GetPoolType() string {
	if x != nil {
		return x.PoolType
	}
	return ""
}

func (x *HA_Single_Request) GetMasterChelfList() []*MasterChelfToken {
	if x != nil {
		return x.MasterChelfList
	}
	return nil
}

type MasterChelfToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address   string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Pid       int64  `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty"`
	Precision int64  `protobuf:"varint,4,opt,name=precision,proto3" json:"precision,omitempty"`
}

func (x *MasterChelfToken) Reset() {
	*x = MasterChelfToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anslysis_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterChelfToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterChelfToken) ProtoMessage() {}

func (x *MasterChelfToken) ProtoReflect() protoreflect.Message {
	mi := &file_anslysis_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterChelfToken.ProtoReflect.Descriptor instead.
func (*MasterChelfToken) Descriptor() ([]byte, []int) {
	return file_anslysis_proto_rawDescGZIP(), []int{2}
}

func (x *MasterChelfToken) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MasterChelfToken) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *MasterChelfToken) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *MasterChelfToken) GetPrecision() int64 {
	if x != nil {
		return x.Precision
	}
	return 0
}

type InputToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address   string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Precision int32  `protobuf:"varint,3,opt,name=precision,proto3" json:"precision,omitempty"`
}

func (x *InputToken) Reset() {
	*x = InputToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anslysis_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputToken) ProtoMessage() {}

func (x *InputToken) ProtoReflect() protoreflect.Message {
	mi := &file_anslysis_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputToken.ProtoReflect.Descriptor instead.
func (*InputToken) Descriptor() ([]byte, []int) {
	return file_anslysis_proto_rawDescGZIP(), []int{3}
}

func (x *InputToken) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InputToken) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *InputToken) GetPrecision() int32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

type RewardToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address   string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Precision int32  `protobuf:"varint,3,opt,name=precision,proto3" json:"precision,omitempty"`
}

func (x *RewardToken) Reset() {
	*x = RewardToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anslysis_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardToken) ProtoMessage() {}

func (x *RewardToken) ProtoReflect() protoreflect.Message {
	mi := &file_anslysis_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardToken.ProtoReflect.Descriptor instead.
func (*RewardToken) Descriptor() ([]byte, []int) {
	return file_anslysis_proto_rawDescGZIP(), []int{4}
}

func (x *RewardToken) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RewardToken) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RewardToken) GetPrecision() int32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

type HA_Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyList []*HA_Single_Reply `protobuf:"bytes,1,rep,name=reply_list,json=replyList,proto3" json:"reply_list,omitempty"`
}

func (x *HA_Reply) Reset() {
	*x = HA_Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anslysis_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HA_Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HA_Reply) ProtoMessage() {}

func (x *HA_Reply) ProtoReflect() protoreflect.Message {
	mi := &file_anslysis_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HA_Reply.ProtoReflect.Descriptor instead.
func (*HA_Reply) Descriptor() ([]byte, []int) {
	return file_anslysis_proto_rawDescGZIP(), []int{5}
}

func (x *HA_Reply) GetReplyList() []*HA_Single_Reply {
	if x != nil {
		return x.ReplyList
	}
	return nil
}

type HA_Single_Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolAddress        string          `protobuf:"bytes,1,opt,name=pool_address,json=poolAddress,proto3" json:"pool_address,omitempty"`                        // 池子地址
	MasterChelfAddress string          `protobuf:"bytes,2,opt,name=master_chelf_address,json=masterChelfAddress,proto3" json:"master_chelf_address,omitempty"` //用来读取master chelf的配置文件的symbol
	OutInfo            []*OutTokenInfo `protobuf:"bytes,3,rep,name=out_info,json=outInfo,proto3" json:"out_info,omitempty"`
}

func (x *HA_Single_Reply) Reset() {
	*x = HA_Single_Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anslysis_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HA_Single_Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HA_Single_Reply) ProtoMessage() {}

func (x *HA_Single_Reply) ProtoReflect() protoreflect.Message {
	mi := &file_anslysis_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HA_Single_Reply.ProtoReflect.Descriptor instead.
func (*HA_Single_Reply) Descriptor() ([]byte, []int) {
	return file_anslysis_proto_rawDescGZIP(), []int{6}
}

func (x *HA_Single_Reply) GetPoolAddress() string {
	if x != nil {
		return x.PoolAddress
	}
	return ""
}

func (x *HA_Single_Reply) GetMasterChelfAddress() string {
	if x != nil {
		return x.MasterChelfAddress
	}
	return ""
}

func (x *HA_Single_Reply) GetOutInfo() []*OutTokenInfo {
	if x != nil {
		return x.OutInfo
	}
	return nil
}

type OutTokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenName    string `protobuf:"bytes,1,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	TokenAmount  string `protobuf:"bytes,2,opt,name=token_amount,json=tokenAmount,proto3" json:"token_amount,omitempty"`
	TokenAddress string `protobuf:"bytes,3,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	TokenType    string `protobuf:"bytes,4,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
}

func (x *OutTokenInfo) Reset() {
	*x = OutTokenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anslysis_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutTokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutTokenInfo) ProtoMessage() {}

func (x *OutTokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_anslysis_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutTokenInfo.ProtoReflect.Descriptor instead.
func (*OutTokenInfo) Descriptor() ([]byte, []int) {
	return file_anslysis_proto_rawDescGZIP(), []int{7}
}

func (x *OutTokenInfo) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *OutTokenInfo) GetTokenAmount() string {
	if x != nil {
		return x.TokenAmount
	}
	return ""
}

func (x *OutTokenInfo) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *OutTokenInfo) GetTokenType() string {
	if x != nil {
		return x.TokenType
	}
	return ""
}

var File_anslysis_proto protoreflect.FileDescriptor

var file_anslysis_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x61, 0x6e, 0x73, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x22, 0x6a, 0x0a, 0x0a, 0x48, 0x41, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x48, 0x41, 0x5f, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x22, 0xc7,
	0x04, 0x0a, 0x11, 0x48, 0x41, 0x5f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x64,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x6f,
	0x6f, 0x6c, 0x48, 0x61, 0x73, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x2f, 0x0a, 0x13, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x10,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x11, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x63, 0x68, 0x65, 0x6c, 0x66, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x65,
	0x6c, 0x66, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x68, 0x65, 0x6c, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x70, 0x0a, 0x10, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x68, 0x65, 0x6c, 0x66, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x0a, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x4c, 0x0a, 0x08, 0x48, 0x41, 0x5f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x48, 0x41, 0x5f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa1, 0x01,
	0x0a, 0x0f, 0x48, 0x41, 0x5f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x68, 0x65, 0x6c, 0x66, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x65, 0x6c, 0x66, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x94, 0x01, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x32, 0x58, 0x0a, 0x08, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x1c, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x48, 0x41, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x48, 0x41, 0x5f, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x42, 0x15, 0x5a, 0x13, 0x2e, 0x2f, 0x3b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_anslysis_proto_rawDescOnce sync.Once
	file_anslysis_proto_rawDescData = file_anslysis_proto_rawDesc
)

func file_anslysis_proto_rawDescGZIP() []byte {
	file_anslysis_proto_rawDescOnce.Do(func() {
		file_anslysis_proto_rawDescData = protoimpl.X.CompressGZIP(file_anslysis_proto_rawDescData)
	})
	return file_anslysis_proto_rawDescData
}

var file_anslysis_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_anslysis_proto_goTypes = []interface{}{
	(*HA_Request)(nil),        // 0: address_analysis.HA_Request
	(*HA_Single_Request)(nil), // 1: address_analysis.HA_Single_Request
	(*MasterChelfToken)(nil),  // 2: address_analysis.MasterChelfToken
	(*InputToken)(nil),        // 3: address_analysis.InputToken
	(*RewardToken)(nil),       // 4: address_analysis.RewardToken
	(*HA_Reply)(nil),          // 5: address_analysis.HA_Reply
	(*HA_Single_Reply)(nil),   // 6: address_analysis.HA_Single_Reply
	(*OutTokenInfo)(nil),      // 7: address_analysis.OutTokenInfo
}
var file_anslysis_proto_depIdxs = []int32{
	1, // 0: address_analysis.HA_Request.request_info:type_name -> address_analysis.HA_Single_Request
	3, // 1: address_analysis.HA_Single_Request.input_token_list:type_name -> address_analysis.InputToken
	4, // 2: address_analysis.HA_Single_Request.reward_token_list:type_name -> address_analysis.RewardToken
	2, // 3: address_analysis.HA_Single_Request.master_chelf_list:type_name -> address_analysis.MasterChelfToken
	6, // 4: address_analysis.HA_Reply.reply_list:type_name -> address_analysis.HA_Single_Reply
	7, // 5: address_analysis.HA_Single_Reply.out_info:type_name -> address_analysis.OutTokenInfo
	0, // 6: address_analysis.Analysis.HandleAnalysis:input_type -> address_analysis.HA_Request
	5, // 7: address_analysis.Analysis.HandleAnalysis:output_type -> address_analysis.HA_Reply
	7, // [7:8] is the sub-list for method output_type
	6, // [6:7] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_anslysis_proto_init() }
func file_anslysis_proto_init() {
	if File_anslysis_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_anslysis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HA_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anslysis_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HA_Single_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anslysis_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterChelfToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anslysis_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anslysis_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anslysis_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HA_Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anslysis_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HA_Single_Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anslysis_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutTokenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_anslysis_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_anslysis_proto_goTypes,
		DependencyIndexes: file_anslysis_proto_depIdxs,
		MessageInfos:      file_anslysis_proto_msgTypes,
	}.Build()
	File_anslysis_proto = out.File
	file_anslysis_proto_rawDesc = nil
	file_anslysis_proto_goTypes = nil
	file_anslysis_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AnalysisClient is the client API for Analysis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnalysisClient interface {
	HandleAnalysis(ctx context.Context, in *HA_Request, opts ...grpc.CallOption) (*HA_Reply, error)
}

type analysisClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalysisClient(cc grpc.ClientConnInterface) AnalysisClient {
	return &analysisClient{cc}
}

func (c *analysisClient) HandleAnalysis(ctx context.Context, in *HA_Request, opts ...grpc.CallOption) (*HA_Reply, error) {
	out := new(HA_Reply)
	err := c.cc.Invoke(ctx, "/address_analysis.Analysis/HandleAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalysisServer is the server API for Analysis service.
type AnalysisServer interface {
	HandleAnalysis(context.Context, *HA_Request) (*HA_Reply, error)
}

// UnimplementedAnalysisServer can be embedded to have forward compatible implementations.
type UnimplementedAnalysisServer struct {
}

func (*UnimplementedAnalysisServer) HandleAnalysis(context.Context, *HA_Request) (*HA_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleAnalysis not implemented")
}

func RegisterAnalysisServer(s *grpc.Server, srv AnalysisServer) {
	s.RegisterService(&_Analysis_serviceDesc, srv)
}

func _Analysis_HandleAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HA_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).HandleAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/address_analysis.Analysis/HandleAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).HandleAnalysis(ctx, req.(*HA_Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Analysis_serviceDesc = grpc.ServiceDesc{
	ServiceName: "address_analysis.Analysis",
	HandlerType: (*AnalysisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleAnalysis",
			Handler:    _Analysis_HandleAnalysis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "anslysis.proto",
}
